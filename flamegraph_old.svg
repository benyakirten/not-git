<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1382" onload="init(evt)" viewBox="0 0 1200 1382" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1382" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1365.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1365.00"> </text><svg id="frames" x="10" width="1180" total_samples="241"><g><title>libsystem_kernel.dylib`write (1 samples, 0.41%)</title><rect x="0.0000%" y="1077" width="0.4149%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1087.50"></text></g><g><title>not-git`not_git::objects::object_file::ObjectFile::new (1 samples, 0.41%)</title><rect x="0.4149%" y="1077" width="0.4149%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.6649%" y="1087.50"></text></g><g><title>not-git`not_git::utils::decode_file (1 samples, 0.41%)</title><rect x="0.4149%" y="1061" width="0.4149%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.6649%" y="1071.50"></text></g><g><title>not-git`std::fs::read::inner (1 samples, 0.41%)</title><rect x="0.4149%" y="1045" width="0.4149%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.6649%" y="1055.50"></text></g><g><title>not-git`std::sys::unix::fs::File::open_c (1 samples, 0.41%)</title><rect x="0.4149%" y="1029" width="0.4149%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.6649%" y="1039.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.41%)</title><rect x="0.4149%" y="1013" width="0.4149%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.6649%" y="1023.50"></text></g><g><title>not-git`not_git::checkout::create_tree (3 samples, 1.24%)</title><rect x="0.0000%" y="1093" width="1.2448%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1103.50"></text></g><g><title>not-git`std::fs::write::inner (1 samples, 0.41%)</title><rect x="0.8299%" y="1077" width="0.4149%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="1.0799%" y="1087.50"></text></g><g><title>not-git`std::sys::unix::fs::File::open_c (1 samples, 0.41%)</title><rect x="0.8299%" y="1061" width="0.4149%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="1.0799%" y="1071.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.41%)</title><rect x="0.8299%" y="1045" width="0.4149%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="1.0799%" y="1055.50"></text></g><g><title>not-git`flate2::mem::Decompress::new (1 samples, 0.41%)</title><rect x="1.2448%" y="1061" width="0.4149%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="1"/><text x="1.4948%" y="1071.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.41%)</title><rect x="1.2448%" y="1045" width="0.4149%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="1"/><text x="1.4948%" y="1055.50"></text></g><g><title>not-git`not_git::objects::object_file::ObjectFile::new (2 samples, 0.83%)</title><rect x="1.2448%" y="1093" width="0.8299%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="2"/><text x="1.4948%" y="1103.50"></text></g><g><title>not-git`not_git::utils::decode_file (2 samples, 0.83%)</title><rect x="1.2448%" y="1077" width="0.8299%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="2"/><text x="1.4948%" y="1087.50"></text></g><g><title>not-git`std::fs::read::inner (1 samples, 0.41%)</title><rect x="1.6598%" y="1061" width="0.4149%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="1"/><text x="1.9098%" y="1071.50"></text></g><g><title>not-git`std::io::default_read_to_end (1 samples, 0.41%)</title><rect x="1.6598%" y="1045" width="0.4149%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="1"/><text x="1.9098%" y="1055.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.41%)</title><rect x="1.6598%" y="1029" width="0.4149%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="1"/><text x="1.9098%" y="1039.50"></text></g><g><title>not-git`not_git::checkout::create_tree (6 samples, 2.49%)</title><rect x="0.0000%" y="1125" width="2.4896%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1135.50">no..</text></g><g><title>not-git`not_git::checkout::create_tree (6 samples, 2.49%)</title><rect x="0.0000%" y="1109" width="2.4896%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="6"/><text x="0.2500%" y="1119.50">no..</text></g><g><title>not-git`std::fs::write::inner (1 samples, 0.41%)</title><rect x="2.0747%" y="1093" width="0.4149%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="1"/><text x="2.3247%" y="1103.50"></text></g><g><title>not-git`std::sys::unix::fs::File::open_c (1 samples, 0.41%)</title><rect x="2.0747%" y="1077" width="0.4149%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="1"/><text x="2.3247%" y="1087.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.41%)</title><rect x="2.0747%" y="1061" width="0.4149%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="1"/><text x="2.3247%" y="1071.50"></text></g><g><title>not-git`std::fs::read::inner (1 samples, 0.41%)</title><rect x="2.4896%" y="1093" width="0.4149%" height="15" fill="rgb(221,5,38)" fg:x="6" fg:w="1"/><text x="2.7396%" y="1103.50"></text></g><g><title>not-git`std::sys::unix::fs::File::open_c (1 samples, 0.41%)</title><rect x="2.4896%" y="1077" width="0.4149%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="1"/><text x="2.7396%" y="1087.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.41%)</title><rect x="2.4896%" y="1061" width="0.4149%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="1"/><text x="2.7396%" y="1071.50"></text></g><g><title>not-git`not_git::checkout::checkout_branch (8 samples, 3.32%)</title><rect x="0.0000%" y="1157" width="3.3195%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="8"/><text x="0.2500%" y="1167.50">not..</text></g><g><title>not-git`not_git::checkout::create_tree (8 samples, 3.32%)</title><rect x="0.0000%" y="1141" width="3.3195%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="8"/><text x="0.2500%" y="1151.50">not..</text></g><g><title>not-git`not_git::objects::object_file::ObjectFile::new (2 samples, 0.83%)</title><rect x="2.4896%" y="1125" width="0.8299%" height="15" fill="rgb(238,160,17)" fg:x="6" fg:w="2"/><text x="2.7396%" y="1135.50"></text></g><g><title>not-git`not_git::utils::decode_file (2 samples, 0.83%)</title><rect x="2.4896%" y="1109" width="0.8299%" height="15" fill="rgb(214,148,48)" fg:x="6" fg:w="2"/><text x="2.7396%" y="1119.50"></text></g><g><title>not-git`std::io::default_read_to_end (1 samples, 0.41%)</title><rect x="2.9046%" y="1093" width="0.4149%" height="15" fill="rgb(232,36,49)" fg:x="7" fg:w="1"/><text x="3.1546%" y="1103.50"></text></g><g><title>not-git`std::io::default_read_to_end::small_probe_read (1 samples, 0.41%)</title><rect x="2.9046%" y="1077" width="0.4149%" height="15" fill="rgb(209,103,24)" fg:x="7" fg:w="1"/><text x="3.1546%" y="1087.50"></text></g><g><title>not-git`&lt;flate2::zlib::read::ZlibDecoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.41%)</title><rect x="2.9046%" y="1061" width="0.4149%" height="15" fill="rgb(229,88,8)" fg:x="7" fg:w="1"/><text x="3.1546%" y="1071.50"></text></g><g><title>not-git`&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (1 samples, 0.41%)</title><rect x="2.9046%" y="1045" width="0.4149%" height="15" fill="rgb(213,181,19)" fg:x="7" fg:w="1"/><text x="3.1546%" y="1055.50"></text></g><g><title>not-git`miniz_oxide::inflate::stream::inflate (1 samples, 0.41%)</title><rect x="2.9046%" y="1029" width="0.4149%" height="15" fill="rgb(254,191,54)" fg:x="7" fg:w="1"/><text x="3.1546%" y="1039.50"></text></g><g><title>not-git`miniz_oxide::inflate::stream::inflate_loop (1 samples, 0.41%)</title><rect x="2.9046%" y="1013" width="0.4149%" height="15" fill="rgb(241,83,37)" fg:x="7" fg:w="1"/><text x="3.1546%" y="1023.50"></text></g><g><title>not-git`miniz_oxide::inflate::core::decompress (1 samples, 0.41%)</title><rect x="2.9046%" y="997" width="0.4149%" height="15" fill="rgb(233,36,39)" fg:x="7" fg:w="1"/><text x="3.1546%" y="1007.50"></text></g><g><title>not-git`miniz_oxide::inflate::core::init_tree (1 samples, 0.41%)</title><rect x="2.9046%" y="981" width="0.4149%" height="15" fill="rgb(226,3,54)" fg:x="7" fg:w="1"/><text x="3.1546%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`_free (6 samples, 2.49%)</title><rect x="3.3195%" y="1141" width="2.4896%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="6"/><text x="3.5695%" y="1151.50">li..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 1.24%)</title><rect x="5.8091%" y="1141" width="1.2448%" height="15" fill="rgb(238,167,29)" fg:x="14" fg:w="3"/><text x="6.0591%" y="1151.50"></text></g><g><title>not-git`DYLD-STUB$$free (2 samples, 0.83%)</title><rect x="7.0539%" y="1141" width="0.8299%" height="15" fill="rgb(232,182,51)" fg:x="17" fg:w="2"/><text x="7.3039%" y="1151.50"></text></g><g><title>not-git`DYLD-STUB$$memcmp (1 samples, 0.41%)</title><rect x="7.8838%" y="1141" width="0.4149%" height="15" fill="rgb(231,60,39)" fg:x="19" fg:w="1"/><text x="8.1338%" y="1151.50"></text></g><g><title>libsystem_kernel.dylib`close (1 samples, 0.41%)</title><rect x="8.2988%" y="1109" width="0.4149%" height="15" fill="rgb(208,69,12)" fg:x="20" fg:w="1"/><text x="8.5488%" y="1119.50"></text></g><g><title>libsystem_kernel.dylib`mkdir (5 samples, 2.07%)</title><rect x="8.7137%" y="1109" width="2.0747%" height="15" fill="rgb(235,93,37)" fg:x="21" fg:w="5"/><text x="8.9637%" y="1119.50">l..</text></g><g><title>libsystem_kernel.dylib`write (7 samples, 2.90%)</title><rect x="10.7884%" y="1109" width="2.9046%" height="15" fill="rgb(213,116,39)" fg:x="26" fg:w="7"/><text x="11.0384%" y="1119.50">li..</text></g><g><title>not-git`flate2::zio::Writer&lt;W,D&gt;::finish (2 samples, 0.83%)</title><rect x="13.6929%" y="1109" width="0.8299%" height="15" fill="rgb(222,207,29)" fg:x="33" fg:w="2"/><text x="13.9429%" y="1119.50"></text></g><g><title>not-git`&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (2 samples, 0.83%)</title><rect x="13.6929%" y="1093" width="0.8299%" height="15" fill="rgb(206,96,30)" fg:x="33" fg:w="2"/><text x="13.9429%" y="1103.50"></text></g><g><title>not-git`flate2::mem::Compress::compress_vec (2 samples, 0.83%)</title><rect x="13.6929%" y="1077" width="0.8299%" height="15" fill="rgb(218,138,4)" fg:x="33" fg:w="2"/><text x="13.9429%" y="1087.50"></text></g><g><title>not-git`miniz_oxide::deflate::stream::deflate (2 samples, 0.83%)</title><rect x="13.6929%" y="1061" width="0.8299%" height="15" fill="rgb(250,191,14)" fg:x="33" fg:w="2"/><text x="13.9429%" y="1071.50"></text></g><g><title>not-git`miniz_oxide::deflate::core::compress_inner (2 samples, 0.83%)</title><rect x="13.6929%" y="1045" width="0.8299%" height="15" fill="rgb(239,60,40)" fg:x="33" fg:w="2"/><text x="13.9429%" y="1055.50"></text></g><g><title>not-git`miniz_oxide::deflate::core::flush_block (1 samples, 0.41%)</title><rect x="14.1079%" y="1029" width="0.4149%" height="15" fill="rgb(206,27,48)" fg:x="34" fg:w="1"/><text x="14.3579%" y="1039.50"></text></g><g><title>not-git`miniz_oxide::deflate::core::compress_block (1 samples, 0.41%)</title><rect x="14.1079%" y="1013" width="0.4149%" height="15" fill="rgb(225,35,8)" fg:x="34" fg:w="1"/><text x="14.3579%" y="1023.50"></text></g><g><title>not-git`miniz_oxide::deflate::core::HuffmanOxide::optimize_table (1 samples, 0.41%)</title><rect x="14.1079%" y="997" width="0.4149%" height="15" fill="rgb(250,213,24)" fg:x="34" fg:w="1"/><text x="14.3579%" y="1007.50"></text></g><g><title>not-git`std::fs::write::inner (9 samples, 3.73%)</title><rect x="14.5228%" y="1109" width="3.7344%" height="15" fill="rgb(247,123,22)" fg:x="35" fg:w="9"/><text x="14.7728%" y="1119.50">not-..</text></g><g><title>not-git`std::sys::unix::fs::File::open_c (9 samples, 3.73%)</title><rect x="14.5228%" y="1093" width="3.7344%" height="15" fill="rgb(231,138,38)" fg:x="35" fg:w="9"/><text x="14.7728%" y="1103.50">not-..</text></g><g><title>libsystem_kernel.dylib`__open (9 samples, 3.73%)</title><rect x="14.5228%" y="1077" width="3.7344%" height="15" fill="rgb(231,145,46)" fg:x="35" fg:w="9"/><text x="14.7728%" y="1087.50">libs..</text></g><g><title>not-git`not_git::hash_object::hash_and_write_object (25 samples, 10.37%)</title><rect x="8.2988%" y="1125" width="10.3734%" height="15" fill="rgb(251,118,11)" fg:x="20" fg:w="25"/><text x="8.5488%" y="1135.50">not-git`not_git..</text></g><g><title>not-git`std::io::Write::write_all (1 samples, 0.41%)</title><rect x="18.2573%" y="1109" width="0.4149%" height="15" fill="rgb(217,147,25)" fg:x="44" fg:w="1"/><text x="18.5073%" y="1119.50"></text></g><g><title>not-git`&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (1 samples, 0.41%)</title><rect x="18.2573%" y="1093" width="0.4149%" height="15" fill="rgb(247,81,37)" fg:x="44" fg:w="1"/><text x="18.5073%" y="1103.50"></text></g><g><title>not-git`flate2::mem::Compress::compress_vec (1 samples, 0.41%)</title><rect x="18.2573%" y="1077" width="0.4149%" height="15" fill="rgb(209,12,38)" fg:x="44" fg:w="1"/><text x="18.5073%" y="1087.50"></text></g><g><title>not-git`miniz_oxide::deflate::stream::deflate (1 samples, 0.41%)</title><rect x="18.2573%" y="1061" width="0.4149%" height="15" fill="rgb(227,1,9)" fg:x="44" fg:w="1"/><text x="18.5073%" y="1071.50"></text></g><g><title>not-git`miniz_oxide::deflate::core::compress_inner (1 samples, 0.41%)</title><rect x="18.2573%" y="1045" width="0.4149%" height="15" fill="rgb(248,47,43)" fg:x="44" fg:w="1"/><text x="18.5073%" y="1055.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.83%)</title><rect x="18.6722%" y="1077" width="0.8299%" height="15" fill="rgb(221,10,30)" fg:x="45" fg:w="2"/><text x="18.9222%" y="1087.50"></text></g><g><title>not-git`not_git::packfile::decode_undeltified_data (30 samples, 12.45%)</title><rect x="8.2988%" y="1141" width="12.4481%" height="15" fill="rgb(210,229,1)" fg:x="20" fg:w="30"/><text x="8.5488%" y="1151.50">not-git`not_git::pa..</text></g><g><title>not-git`not_git::utils::read_next_zlib_data (5 samples, 2.07%)</title><rect x="18.6722%" y="1125" width="2.0747%" height="15" fill="rgb(222,148,37)" fg:x="45" fg:w="5"/><text x="18.9222%" y="1135.50">n..</text></g><g><title>not-git`std::io::default_read_to_end (5 samples, 2.07%)</title><rect x="18.6722%" y="1109" width="2.0747%" height="15" fill="rgb(234,67,33)" fg:x="45" fg:w="5"/><text x="18.9222%" y="1119.50">n..</text></g><g><title>not-git`std::io::default_read_to_end::small_probe_read (5 samples, 2.07%)</title><rect x="18.6722%" y="1093" width="2.0747%" height="15" fill="rgb(247,98,35)" fg:x="45" fg:w="5"/><text x="18.9222%" y="1103.50">n..</text></g><g><title>not-git`&lt;flate2::zlib::read::ZlibDecoder&lt;R&gt; as std::io::Read&gt;::read (3 samples, 1.24%)</title><rect x="19.5021%" y="1077" width="1.2448%" height="15" fill="rgb(247,138,52)" fg:x="47" fg:w="3"/><text x="19.7521%" y="1087.50"></text></g><g><title>not-git`&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (3 samples, 1.24%)</title><rect x="19.5021%" y="1061" width="1.2448%" height="15" fill="rgb(213,79,30)" fg:x="47" fg:w="3"/><text x="19.7521%" y="1071.50"></text></g><g><title>not-git`miniz_oxide::inflate::stream::inflate (3 samples, 1.24%)</title><rect x="19.5021%" y="1045" width="1.2448%" height="15" fill="rgb(246,177,23)" fg:x="47" fg:w="3"/><text x="19.7521%" y="1055.50"></text></g><g><title>not-git`miniz_oxide::inflate::stream::inflate_loop (3 samples, 1.24%)</title><rect x="19.5021%" y="1029" width="1.2448%" height="15" fill="rgb(230,62,27)" fg:x="47" fg:w="3"/><text x="19.7521%" y="1039.50"></text></g><g><title>not-git`miniz_oxide::inflate::core::decompress (3 samples, 1.24%)</title><rect x="19.5021%" y="1013" width="1.2448%" height="15" fill="rgb(216,154,8)" fg:x="47" fg:w="3"/><text x="19.7521%" y="1023.50"></text></g><g><title>not-git`miniz_oxide::inflate::core::init_tree (1 samples, 0.41%)</title><rect x="20.3320%" y="997" width="0.4149%" height="15" fill="rgb(244,35,45)" fg:x="49" fg:w="1"/><text x="20.5820%" y="1007.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.41%)</title><rect x="21.5768%" y="1125" width="0.4149%" height="15" fill="rgb(251,115,12)" fg:x="52" fg:w="1"/><text x="21.8268%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 4.98%)</title><rect x="21.9917%" y="1125" width="4.9793%" height="15" fill="rgb(240,54,50)" fg:x="53" fg:w="12"/><text x="22.2417%" y="1135.50">libsys..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 2.07%)</title><rect x="26.9710%" y="1125" width="2.0747%" height="15" fill="rgb(233,84,52)" fg:x="65" fg:w="5"/><text x="27.2210%" y="1135.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 2.07%)</title><rect x="29.0456%" y="1125" width="2.0747%" height="15" fill="rgb(207,117,47)" fg:x="70" fg:w="5"/><text x="29.2956%" y="1135.50">l..</text></g><g><title>not-git`&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 2.49%)</title><rect x="31.1203%" y="1125" width="2.4896%" height="15" fill="rgb(249,43,39)" fg:x="75" fg:w="6"/><text x="31.3703%" y="1135.50">no..</text></g><g><title>not-git`DYLD-STUB$$memcpy (1 samples, 0.41%)</title><rect x="33.6100%" y="1125" width="0.4149%" height="15" fill="rgb(209,38,44)" fg:x="81" fg:w="1"/><text x="33.8600%" y="1135.50"></text></g><g><title>not-git`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.41%)</title><rect x="34.0249%" y="1125" width="0.4149%" height="15" fill="rgb(236,212,23)" fg:x="82" fg:w="1"/><text x="34.2749%" y="1135.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.83%)</title><rect x="34.8548%" y="1109" width="0.8299%" height="15" fill="rgb(242,79,21)" fg:x="84" fg:w="2"/><text x="35.1048%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 3.73%)</title><rect x="35.6846%" y="1109" width="3.7344%" height="15" fill="rgb(211,96,35)" fg:x="86" fg:w="9"/><text x="35.9346%" y="1119.50">libs..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 1.24%)</title><rect x="39.4191%" y="1109" width="1.2448%" height="15" fill="rgb(253,215,40)" fg:x="95" fg:w="3"/><text x="39.6691%" y="1119.50"></text></g><g><title>not-git`&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 1.24%)</title><rect x="40.6639%" y="1109" width="1.2448%" height="15" fill="rgb(211,81,21)" fg:x="98" fg:w="3"/><text x="40.9139%" y="1119.50"></text></g><g><title>not-git`DYLD-STUB$$malloc (1 samples, 0.41%)</title><rect x="41.9087%" y="1109" width="0.4149%" height="15" fill="rgb(208,190,38)" fg:x="101" fg:w="1"/><text x="42.1587%" y="1119.50"></text></g><g><title>not-git`DYLD-STUB$$memcpy (2 samples, 0.83%)</title><rect x="42.3237%" y="1109" width="0.8299%" height="15" fill="rgb(235,213,38)" fg:x="102" fg:w="2"/><text x="42.5737%" y="1119.50"></text></g><g><title>not-git`__rdl_alloc (2 samples, 0.83%)</title><rect x="43.1535%" y="1109" width="0.8299%" height="15" fill="rgb(237,122,38)" fg:x="104" fg:w="2"/><text x="43.4035%" y="1119.50"></text></g><g><title>not-git`DYLD-STUB$$realloc (1 samples, 0.41%)</title><rect x="44.3983%" y="1093" width="0.4149%" height="15" fill="rgb(244,218,35)" fg:x="107" fg:w="1"/><text x="44.6483%" y="1103.50"></text></g><g><title>not-git`__rdl_realloc (1 samples, 0.41%)</title><rect x="44.8133%" y="1093" width="0.4149%" height="15" fill="rgb(240,68,47)" fg:x="108" fg:w="1"/><text x="45.0633%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.41%)</title><rect x="47.3029%" y="1045" width="0.4149%" height="15" fill="rgb(210,16,53)" fg:x="114" fg:w="1"/><text x="47.5529%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 1.66%)</title><rect x="47.7178%" y="1045" width="1.6598%" height="15" fill="rgb(235,124,12)" fg:x="115" fg:w="4"/><text x="47.9678%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.41%)</title><rect x="49.3776%" y="1045" width="0.4149%" height="15" fill="rgb(224,169,11)" fg:x="119" fg:w="1"/><text x="49.6276%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 1.66%)</title><rect x="49.7925%" y="1045" width="1.6598%" height="15" fill="rgb(250,166,2)" fg:x="120" fg:w="4"/><text x="50.0425%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 1.66%)</title><rect x="49.7925%" y="1029" width="1.6598%" height="15" fill="rgb(242,216,29)" fg:x="120" fg:w="4"/><text x="50.0425%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (14 samples, 5.81%)</title><rect x="46.0581%" y="1061" width="5.8091%" height="15" fill="rgb(230,116,27)" fg:x="111" fg:w="14"/><text x="46.3081%" y="1071.50">libsyst..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.41%)</title><rect x="51.4523%" y="1045" width="0.4149%" height="15" fill="rgb(228,99,48)" fg:x="124" fg:w="1"/><text x="51.7023%" y="1055.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (17 samples, 7.05%)</title><rect x="45.2282%" y="1077" width="7.0539%" height="15" fill="rgb(253,11,6)" fg:x="109" fg:w="17"/><text x="45.4782%" y="1087.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.41%)</title><rect x="51.8672%" y="1061" width="0.4149%" height="15" fill="rgb(247,143,39)" fg:x="125" fg:w="1"/><text x="52.1172%" y="1071.50"></text></g><g><title>not-git`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (25 samples, 10.37%)</title><rect x="43.9834%" y="1109" width="10.3734%" height="15" fill="rgb(236,97,10)" fg:x="106" fg:w="25"/><text x="44.2334%" y="1119.50">not-git`alloc::..</text></g><g><title>not-git`alloc::raw_vec::finish_grow (22 samples, 9.13%)</title><rect x="45.2282%" y="1093" width="9.1286%" height="15" fill="rgb(233,208,19)" fg:x="109" fg:w="22"/><text x="45.4782%" y="1103.50">not-git`alloc..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 2.07%)</title><rect x="52.2822%" y="1077" width="2.0747%" height="15" fill="rgb(216,164,2)" fg:x="126" fg:w="5"/><text x="52.5322%" y="1087.50">l..</text></g><g><title>not-git`not_git::objects::object_hash::ObjectHash::full_hash (51 samples, 21.16%)</title><rect x="34.4398%" y="1125" width="21.1618%" height="15" fill="rgb(220,129,5)" fg:x="83" fg:w="51"/><text x="34.6898%" y="1135.50">not-git`not_git::objects::object_..</text></g><g><title>not-git`alloc::raw_vec::finish_grow (3 samples, 1.24%)</title><rect x="54.3568%" y="1109" width="1.2448%" height="15" fill="rgb(242,17,10)" fg:x="131" fg:w="3"/><text x="54.6068%" y="1119.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.41%)</title><rect x="55.6017%" y="1109" width="0.4149%" height="15" fill="rgb(242,107,0)" fg:x="134" fg:w="1"/><text x="55.8517%" y="1119.50"></text></g><g><title>libsystem_kernel.dylib`close (7 samples, 2.90%)</title><rect x="56.0166%" y="1093" width="2.9046%" height="15" fill="rgb(251,28,31)" fg:x="135" fg:w="7"/><text x="56.2666%" y="1103.50">li..</text></g><g><title>libsystem_kernel.dylib`mkdir (4 samples, 1.66%)</title><rect x="58.9212%" y="1093" width="1.6598%" height="15" fill="rgb(233,223,10)" fg:x="142" fg:w="4"/><text x="59.1712%" y="1103.50"></text></g><g><title>libsystem_kernel.dylib`stat (1 samples, 0.41%)</title><rect x="60.5809%" y="1093" width="0.4149%" height="15" fill="rgb(215,21,27)" fg:x="146" fg:w="1"/><text x="60.8309%" y="1103.50"></text></g><g><title>libsystem_kernel.dylib`write (7 samples, 2.90%)</title><rect x="60.9959%" y="1093" width="2.9046%" height="15" fill="rgb(232,23,21)" fg:x="147" fg:w="7"/><text x="61.2459%" y="1103.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.41%)</title><rect x="63.9004%" y="1093" width="0.4149%" height="15" fill="rgb(244,5,23)" fg:x="154" fg:w="1"/><text x="64.1504%" y="1103.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.41%)</title><rect x="64.3154%" y="1093" width="0.4149%" height="15" fill="rgb(226,81,46)" fg:x="155" fg:w="1"/><text x="64.5654%" y="1103.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.41%)</title><rect x="64.7303%" y="1077" width="0.4149%" height="15" fill="rgb(247,70,30)" fg:x="156" fg:w="1"/><text x="64.9803%" y="1087.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (1 samples, 0.41%)</title><rect x="64.7303%" y="1061" width="0.4149%" height="15" fill="rgb(212,68,19)" fg:x="156" fg:w="1"/><text x="64.9803%" y="1071.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.41%)</title><rect x="65.1452%" y="1077" width="0.4149%" height="15" fill="rgb(240,187,13)" fg:x="157" fg:w="1"/><text x="65.3952%" y="1087.50"></text></g><g><title>not-git`flate2::mem::Compress::new (3 samples, 1.24%)</title><rect x="64.7303%" y="1093" width="1.2448%" height="15" fill="rgb(223,113,26)" fg:x="156" fg:w="3"/><text x="64.9803%" y="1103.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.41%)</title><rect x="65.5602%" y="1077" width="0.4149%" height="15" fill="rgb(206,192,2)" fg:x="158" fg:w="1"/><text x="65.8102%" y="1087.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.41%)</title><rect x="66.8050%" y="997" width="0.4149%" height="15" fill="rgb(241,108,4)" fg:x="161" fg:w="1"/><text x="67.0550%" y="1007.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.41%)</title><rect x="68.4647%" y="981" width="0.4149%" height="15" fill="rgb(247,173,49)" fg:x="165" fg:w="1"/><text x="68.7147%" y="991.50"></text></g><g><title>not-git`flate2::zio::Writer&lt;W,D&gt;::finish (14 samples, 5.81%)</title><rect x="65.9751%" y="1093" width="5.8091%" height="15" fill="rgb(224,114,35)" fg:x="159" fg:w="14"/><text x="66.2251%" y="1103.50">not-git..</text></g><g><title>not-git`&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (14 samples, 5.81%)</title><rect x="65.9751%" y="1077" width="5.8091%" height="15" fill="rgb(245,159,27)" fg:x="159" fg:w="14"/><text x="66.2251%" y="1087.50">not-git..</text></g><g><title>not-git`flate2::mem::Compress::compress_vec (14 samples, 5.81%)</title><rect x="65.9751%" y="1061" width="5.8091%" height="15" fill="rgb(245,172,44)" fg:x="159" fg:w="14"/><text x="66.2251%" y="1071.50">not-git..</text></g><g><title>not-git`miniz_oxide::deflate::stream::deflate (14 samples, 5.81%)</title><rect x="65.9751%" y="1045" width="5.8091%" height="15" fill="rgb(236,23,11)" fg:x="159" fg:w="14"/><text x="66.2251%" y="1055.50">not-git..</text></g><g><title>not-git`miniz_oxide::deflate::core::compress_inner (14 samples, 5.81%)</title><rect x="65.9751%" y="1029" width="5.8091%" height="15" fill="rgb(205,117,38)" fg:x="159" fg:w="14"/><text x="66.2251%" y="1039.50">not-git..</text></g><g><title>not-git`miniz_oxide::deflate::core::flush_block (12 samples, 4.98%)</title><rect x="66.8050%" y="1013" width="4.9793%" height="15" fill="rgb(237,72,25)" fg:x="161" fg:w="12"/><text x="67.0550%" y="1023.50">not-gi..</text></g><g><title>not-git`miniz_oxide::deflate::core::compress_block (11 samples, 4.56%)</title><rect x="67.2199%" y="997" width="4.5643%" height="15" fill="rgb(244,70,9)" fg:x="162" fg:w="11"/><text x="67.4699%" y="1007.50">not-g..</text></g><g><title>not-git`miniz_oxide::deflate::core::HuffmanOxide::optimize_table (7 samples, 2.90%)</title><rect x="68.8797%" y="981" width="2.9046%" height="15" fill="rgb(217,125,39)" fg:x="166" fg:w="7"/><text x="69.1297%" y="991.50">no..</text></g><g><title>not-git`std::fs::write::inner (29 samples, 12.03%)</title><rect x="71.7842%" y="1093" width="12.0332%" height="15" fill="rgb(235,36,10)" fg:x="173" fg:w="29"/><text x="72.0342%" y="1103.50">not-git`std::fs::w..</text></g><g><title>not-git`std::sys::unix::fs::File::open_c (29 samples, 12.03%)</title><rect x="71.7842%" y="1077" width="12.0332%" height="15" fill="rgb(251,123,47)" fg:x="173" fg:w="29"/><text x="72.0342%" y="1087.50">not-git`std::sys::..</text></g><g><title>libsystem_kernel.dylib`__open (29 samples, 12.03%)</title><rect x="71.7842%" y="1061" width="12.0332%" height="15" fill="rgb(221,13,13)" fg:x="173" fg:w="29"/><text x="72.0342%" y="1071.50">libsystem_kernel.d..</text></g><g><title>not-git`adler::Adler32::write_slice (1 samples, 0.41%)</title><rect x="83.8174%" y="1029" width="0.4149%" height="15" fill="rgb(238,131,9)" fg:x="202" fg:w="1"/><text x="84.0674%" y="1039.50"></text></g><g><title>not-git`not_git::hash_object::hash_and_write_object (81 samples, 33.61%)</title><rect x="56.0166%" y="1109" width="33.6100%" height="15" fill="rgb(211,50,8)" fg:x="135" fg:w="81"/><text x="56.2666%" y="1119.50">not-git`not_git::hash_object::hash_and_write_object</text></g><g><title>not-git`std::io::Write::write_all (14 samples, 5.81%)</title><rect x="83.8174%" y="1093" width="5.8091%" height="15" fill="rgb(245,182,24)" fg:x="202" fg:w="14"/><text x="84.0674%" y="1103.50">not-git..</text></g><g><title>not-git`&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run_vec (14 samples, 5.81%)</title><rect x="83.8174%" y="1077" width="5.8091%" height="15" fill="rgb(242,14,37)" fg:x="202" fg:w="14"/><text x="84.0674%" y="1087.50">not-git..</text></g><g><title>not-git`flate2::mem::Compress::compress_vec (14 samples, 5.81%)</title><rect x="83.8174%" y="1061" width="5.8091%" height="15" fill="rgb(246,228,12)" fg:x="202" fg:w="14"/><text x="84.0674%" y="1071.50">not-git..</text></g><g><title>not-git`miniz_oxide::deflate::stream::deflate (14 samples, 5.81%)</title><rect x="83.8174%" y="1045" width="5.8091%" height="15" fill="rgb(213,55,15)" fg:x="202" fg:w="14"/><text x="84.0674%" y="1055.50">not-git..</text></g><g><title>not-git`miniz_oxide::deflate::core::compress_inner (13 samples, 5.39%)</title><rect x="84.2324%" y="1029" width="5.3942%" height="15" fill="rgb(209,9,3)" fg:x="203" fg:w="13"/><text x="84.4824%" y="1039.50">not-git..</text></g><g><title>not-git`flate2::mem::Decompress::new (1 samples, 0.41%)</title><rect x="89.6266%" y="1093" width="0.4149%" height="15" fill="rgb(230,59,30)" fg:x="216" fg:w="1"/><text x="89.8766%" y="1103.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.41%)</title><rect x="89.6266%" y="1077" width="0.4149%" height="15" fill="rgb(209,121,21)" fg:x="216" fg:w="1"/><text x="89.8766%" y="1087.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.41%)</title><rect x="90.0415%" y="981" width="0.4149%" height="15" fill="rgb(220,109,13)" fg:x="217" fg:w="1"/><text x="90.2915%" y="991.50"></text></g><g><title>not-git`not_git::utils::read_next_zlib_data (5 samples, 2.07%)</title><rect x="89.6266%" y="1109" width="2.0747%" height="15" fill="rgb(232,18,1)" fg:x="216" fg:w="5"/><text x="89.8766%" y="1119.50">n..</text></g><g><title>not-git`std::io::default_read_to_end (4 samples, 1.66%)</title><rect x="90.0415%" y="1093" width="1.6598%" height="15" fill="rgb(215,41,42)" fg:x="217" fg:w="4"/><text x="90.2915%" y="1103.50"></text></g><g><title>not-git`std::io::default_read_to_end::small_probe_read (4 samples, 1.66%)</title><rect x="90.0415%" y="1077" width="1.6598%" height="15" fill="rgb(224,123,36)" fg:x="217" fg:w="4"/><text x="90.2915%" y="1087.50"></text></g><g><title>not-git`&lt;flate2::zlib::read::ZlibDecoder&lt;R&gt; as std::io::Read&gt;::read (4 samples, 1.66%)</title><rect x="90.0415%" y="1061" width="1.6598%" height="15" fill="rgb(240,125,3)" fg:x="217" fg:w="4"/><text x="90.2915%" y="1071.50"></text></g><g><title>not-git`&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (4 samples, 1.66%)</title><rect x="90.0415%" y="1045" width="1.6598%" height="15" fill="rgb(205,98,50)" fg:x="217" fg:w="4"/><text x="90.2915%" y="1055.50"></text></g><g><title>not-git`miniz_oxide::inflate::stream::inflate (4 samples, 1.66%)</title><rect x="90.0415%" y="1029" width="1.6598%" height="15" fill="rgb(205,185,37)" fg:x="217" fg:w="4"/><text x="90.2915%" y="1039.50"></text></g><g><title>not-git`miniz_oxide::inflate::stream::inflate_loop (4 samples, 1.66%)</title><rect x="90.0415%" y="1013" width="1.6598%" height="15" fill="rgb(238,207,15)" fg:x="217" fg:w="4"/><text x="90.2915%" y="1023.50"></text></g><g><title>not-git`miniz_oxide::inflate::core::decompress (4 samples, 1.66%)</title><rect x="90.0415%" y="997" width="1.6598%" height="15" fill="rgb(213,199,42)" fg:x="217" fg:w="4"/><text x="90.2915%" y="1007.50"></text></g><g><title>not-git`miniz_oxide::inflate::core::init_tree (3 samples, 1.24%)</title><rect x="90.4564%" y="981" width="1.2448%" height="15" fill="rgb(235,201,11)" fg:x="218" fg:w="3"/><text x="90.7064%" y="991.50"></text></g><g><title>not-git`not_git::packfile::read_obj_ref_data (173 samples, 71.78%)</title><rect x="20.7469%" y="1141" width="71.7842%" height="15" fill="rgb(207,46,11)" fg:x="50" fg:w="173"/><text x="20.9969%" y="1151.50">not-git`not_git::packfile::read_obj_ref_data</text></g><g><title>not-git`not_git::packfile::compile_file_from_deltas (89 samples, 36.93%)</title><rect x="55.6017%" y="1125" width="36.9295%" height="15" fill="rgb(241,35,35)" fg:x="134" fg:w="89"/><text x="55.8517%" y="1135.50">not-git`not_git::packfile::compile_file_from_deltas</text></g><g><title>not-git`sha1::compress::compress (2 samples, 0.83%)</title><rect x="91.7012%" y="1109" width="0.8299%" height="15" fill="rgb(243,32,47)" fg:x="221" fg:w="2"/><text x="91.9512%" y="1119.50"></text></g><g><title>not-git`not_git::clone::download_commit (216 samples, 89.63%)</title><rect x="3.3195%" y="1157" width="89.6266%" height="15" fill="rgb(247,202,23)" fg:x="8" fg:w="216"/><text x="3.5695%" y="1167.50">not-git`not_git::clone::download_commit</text></g><g><title>not-git`reqwest::blocking::request::RequestBuilder::send (1 samples, 0.41%)</title><rect x="92.5311%" y="1141" width="0.4149%" height="15" fill="rgb(219,102,11)" fg:x="223" fg:w="1"/><text x="92.7811%" y="1151.50"></text></g><g><title>not-git`reqwest::blocking::client::Client::execute (1 samples, 0.41%)</title><rect x="92.5311%" y="1125" width="0.4149%" height="15" fill="rgb(243,110,44)" fg:x="223" fg:w="1"/><text x="92.7811%" y="1135.50"></text></g><g><title>not-git`&lt;tokio::runtime::scheduler::current_thread::Handle as tokio::util::wake::Wake&gt;::wake (1 samples, 0.41%)</title><rect x="92.5311%" y="1109" width="0.4149%" height="15" fill="rgb(222,74,54)" fg:x="223" fg:w="1"/><text x="92.7811%" y="1119.50"></text></g><g><title>libsystem_kernel.dylib`kevent (1 samples, 0.41%)</title><rect x="92.5311%" y="1093" width="0.4149%" height="15" fill="rgb(216,99,12)" fg:x="223" fg:w="1"/><text x="92.7811%" y="1103.50"></text></g><g><title>dyld`start (225 samples, 93.36%)</title><rect x="0.0000%" y="1317" width="93.3610%" height="15" fill="rgb(226,22,26)" fg:x="0" fg:w="225"/><text x="0.2500%" y="1327.50">dyld`start</text></g><g><title>not-git`main (225 samples, 93.36%)</title><rect x="0.0000%" y="1301" width="93.3610%" height="15" fill="rgb(217,163,10)" fg:x="0" fg:w="225"/><text x="0.2500%" y="1311.50">not-git`main</text></g><g><title>not-git`std::rt::lang_start_internal (225 samples, 93.36%)</title><rect x="0.0000%" y="1285" width="93.3610%" height="15" fill="rgb(213,25,53)" fg:x="0" fg:w="225"/><text x="0.2500%" y="1295.50">not-git`std::rt::lang_start_internal</text></g><g><title>not-git`std::panicking::try (225 samples, 93.36%)</title><rect x="0.0000%" y="1269" width="93.3610%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="225"/><text x="0.2500%" y="1279.50">not-git`std::panicking::try</text></g><g><title>not-git`std::rt::lang_start::_{{closure}} (225 samples, 93.36%)</title><rect x="0.0000%" y="1253" width="93.3610%" height="15" fill="rgb(220,39,43)" fg:x="0" fg:w="225"/><text x="0.2500%" y="1263.50">not-git`std::rt::lang_start::_{{closure}}</text></g><g><title>not-git`std::sys_common::backtrace::__rust_begin_short_backtrace (225 samples, 93.36%)</title><rect x="0.0000%" y="1237" width="93.3610%" height="15" fill="rgb(229,68,48)" fg:x="0" fg:w="225"/><text x="0.2500%" y="1247.50">not-git`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>not-git`not_git::main (225 samples, 93.36%)</title><rect x="0.0000%" y="1221" width="93.3610%" height="15" fill="rgb(252,8,32)" fg:x="0" fg:w="225"/><text x="0.2500%" y="1231.50">not-git`not_git::main</text></g><g><title>not-git`not_git::clone::clone_command (225 samples, 93.36%)</title><rect x="0.0000%" y="1205" width="93.3610%" height="15" fill="rgb(223,20,43)" fg:x="0" fg:w="225"/><text x="0.2500%" y="1215.50">not-git`not_git::clone::clone_command</text></g><g><title>not-git`not_git::clone::perform_clone (225 samples, 93.36%)</title><rect x="0.0000%" y="1189" width="93.3610%" height="15" fill="rgb(229,81,49)" fg:x="0" fg:w="225"/><text x="0.2500%" y="1199.50">not-git`not_git::clone::perform_clone</text></g><g><title>not-git`not_git::clone::clone (225 samples, 93.36%)</title><rect x="0.0000%" y="1173" width="93.3610%" height="15" fill="rgb(236,28,36)" fg:x="0" fg:w="225"/><text x="0.2500%" y="1183.50">not-git`not_git::clone::clone</text></g><g><title>not-git`reqwest::blocking::client::Client::new (1 samples, 0.41%)</title><rect x="92.9461%" y="1157" width="0.4149%" height="15" fill="rgb(249,185,26)" fg:x="224" fg:w="1"/><text x="93.1961%" y="1167.50"></text></g><g><title>not-git`reqwest::async_impl::client::ClientBuilder::new (1 samples, 0.41%)</title><rect x="92.9461%" y="1141" width="0.4149%" height="15" fill="rgb(249,174,33)" fg:x="224" fg:w="1"/><text x="93.1961%" y="1151.50"></text></g><g><title>not-git`std::sys::common::thread_local::fast_local::Key&lt;T&gt;::try_initialize (1 samples, 0.41%)</title><rect x="92.9461%" y="1125" width="0.4149%" height="15" fill="rgb(233,201,37)" fg:x="224" fg:w="1"/><text x="93.1961%" y="1135.50"></text></g><g><title>not-git`std::sys::unix::rand::hashmap_random_keys (1 samples, 0.41%)</title><rect x="92.9461%" y="1109" width="0.4149%" height="15" fill="rgb(221,78,26)" fg:x="224" fg:w="1"/><text x="93.1961%" y="1119.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (1 samples, 0.41%)</title><rect x="92.9461%" y="1093" width="0.4149%" height="15" fill="rgb(250,127,30)" fg:x="224" fg:w="1"/><text x="93.1961%" y="1103.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.41%)</title><rect x="93.3610%" y="1317" width="0.4149%" height="15" fill="rgb(230,49,44)" fg:x="225" fg:w="1"/><text x="93.6110%" y="1327.50"></text></g><g><title>not-git`tokio::runtime::blocking::pool::Inner::run (1 samples, 0.41%)</title><rect x="93.7759%" y="1237" width="0.4149%" height="15" fill="rgb(229,67,23)" fg:x="226" fg:w="1"/><text x="94.0259%" y="1247.50"></text></g><g><title>not-git`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.41%)</title><rect x="93.7759%" y="1221" width="0.4149%" height="15" fill="rgb(249,83,47)" fg:x="226" fg:w="1"/><text x="94.0259%" y="1231.50"></text></g><g><title>not-git`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1 samples, 0.41%)</title><rect x="93.7759%" y="1205" width="0.4149%" height="15" fill="rgb(215,43,3)" fg:x="226" fg:w="1"/><text x="94.0259%" y="1215.50"></text></g><g><title>not-git`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.41%)</title><rect x="93.7759%" y="1189" width="0.4149%" height="15" fill="rgb(238,154,13)" fg:x="226" fg:w="1"/><text x="94.0259%" y="1199.50"></text></g><g><title>not-git`&lt;(&amp;str,u16) as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (1 samples, 0.41%)</title><rect x="93.7759%" y="1173" width="0.4149%" height="15" fill="rgb(219,56,2)" fg:x="226" fg:w="1"/><text x="94.0259%" y="1183.50"></text></g><g><title>not-git`&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from (1 samples, 0.41%)</title><rect x="93.7759%" y="1157" width="0.4149%" height="15" fill="rgb(233,0,4)" fg:x="226" fg:w="1"/><text x="94.0259%" y="1167.50"></text></g><g><title>libsystem_info.dylib`getaddrinfo (1 samples, 0.41%)</title><rect x="93.7759%" y="1141" width="0.4149%" height="15" fill="rgb(235,30,7)" fg:x="226" fg:w="1"/><text x="94.0259%" y="1151.50"></text></g><g><title>libsystem_info.dylib`si_addrinfo (1 samples, 0.41%)</title><rect x="93.7759%" y="1125" width="0.4149%" height="15" fill="rgb(250,79,13)" fg:x="226" fg:w="1"/><text x="94.0259%" y="1135.50"></text></g><g><title>Network`nw_path_libinfo_path_check (1 samples, 0.41%)</title><rect x="93.7759%" y="1109" width="0.4149%" height="15" fill="rgb(211,146,34)" fg:x="226" fg:w="1"/><text x="94.0259%" y="1119.50"></text></g><g><title>Network`nw_path_create_evaluator_for_endpoint (1 samples, 0.41%)</title><rect x="93.7759%" y="1093" width="0.4149%" height="15" fill="rgb(228,22,38)" fg:x="226" fg:w="1"/><text x="94.0259%" y="1103.50"></text></g><g><title>Network`nw_path_evaluator_evaluate (1 samples, 0.41%)</title><rect x="93.7759%" y="1077" width="0.4149%" height="15" fill="rgb(235,168,5)" fg:x="226" fg:w="1"/><text x="94.0259%" y="1087.50"></text></g><g><title>Network`nw_path_snapshot_path (1 samples, 0.41%)</title><rect x="93.7759%" y="1061" width="0.4149%" height="15" fill="rgb(221,155,16)" fg:x="226" fg:w="1"/><text x="94.0259%" y="1071.50"></text></g><g><title>Network`nw_path_copy_dictionary_for_agent_with_generation (1 samples, 0.41%)</title><rect x="93.7759%" y="1045" width="0.4149%" height="15" fill="rgb(215,215,53)" fg:x="226" fg:w="1"/><text x="94.0259%" y="1055.50"></text></g><g><title>Network`nw_network_agent_copy_dictionary_from_necp (1 samples, 0.41%)</title><rect x="93.7759%" y="1029" width="0.4149%" height="15" fill="rgb(223,4,10)" fg:x="226" fg:w="1"/><text x="94.0259%" y="1039.50"></text></g><g><title>libxpc.dylib`xpc_dictionary_create (1 samples, 0.41%)</title><rect x="93.7759%" y="1013" width="0.4149%" height="15" fill="rgb(234,103,6)" fg:x="226" fg:w="1"/><text x="94.0259%" y="1023.50"></text></g><g><title>libdispatch.dylib`_os_object_alloc_realized (1 samples, 0.41%)</title><rect x="93.7759%" y="997" width="0.4149%" height="15" fill="rgb(227,97,0)" fg:x="226" fg:w="1"/><text x="94.0259%" y="1007.50"></text></g><g><title>libobjc.A.dylib`class_createInstance (1 samples, 0.41%)</title><rect x="93.7759%" y="981" width="0.4149%" height="15" fill="rgb(234,150,53)" fg:x="226" fg:w="1"/><text x="94.0259%" y="991.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.41%)</title><rect x="93.7759%" y="965" width="0.4149%" height="15" fill="rgb(228,201,54)" fg:x="226" fg:w="1"/><text x="94.0259%" y="975.50"></text></g><g><title>not-git`tokio::runtime::scheduler::current_thread::Context::enter (1 samples, 0.41%)</title><rect x="94.1909%" y="1189" width="0.4149%" height="15" fill="rgb(222,22,37)" fg:x="227" fg:w="1"/><text x="94.4409%" y="1199.50"></text></g><g><title>not-git`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.41%)</title><rect x="94.1909%" y="1173" width="0.4149%" height="15" fill="rgb(237,53,32)" fg:x="227" fg:w="1"/><text x="94.4409%" y="1183.50"></text></g><g><title>not-git`reqwest::async_impl::client::ClientBuilder::build (1 samples, 0.41%)</title><rect x="94.1909%" y="1157" width="0.4149%" height="15" fill="rgb(233,25,53)" fg:x="227" fg:w="1"/><text x="94.4409%" y="1167.50"></text></g><g><title>not-git`once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.41%)</title><rect x="94.1909%" y="1141" width="0.4149%" height="15" fill="rgb(210,40,34)" fg:x="227" fg:w="1"/><text x="94.4409%" y="1151.50"></text></g><g><title>not-git`once_cell::imp::initialize_or_wait (1 samples, 0.41%)</title><rect x="94.1909%" y="1125" width="0.4149%" height="15" fill="rgb(241,220,44)" fg:x="227" fg:w="1"/><text x="94.4409%" y="1135.50"></text></g><g><title>not-git`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.41%)</title><rect x="94.1909%" y="1109" width="0.4149%" height="15" fill="rgb(235,28,35)" fg:x="227" fg:w="1"/><text x="94.4409%" y="1119.50"></text></g><g><title>not-git`core::ops::function::FnOnce::call_once (1 samples, 0.41%)</title><rect x="94.1909%" y="1093" width="0.4149%" height="15" fill="rgb(210,56,17)" fg:x="227" fg:w="1"/><text x="94.4409%" y="1103.50"></text></g><g><title>not-git`system_configuration::dynamic_store::SCDynamicStoreBuilder&lt;T&gt;::build (1 samples, 0.41%)</title><rect x="94.1909%" y="1077" width="0.4149%" height="15" fill="rgb(224,130,29)" fg:x="227" fg:w="1"/><text x="94.4409%" y="1087.50"></text></g><g><title>not-git`system_configuration::dynamic_store::SCDynamicStore::create (1 samples, 0.41%)</title><rect x="94.1909%" y="1061" width="0.4149%" height="15" fill="rgb(235,212,8)" fg:x="227" fg:w="1"/><text x="94.4409%" y="1071.50"></text></g><g><title>SystemConfiguration`SCDynamicStoreCreateWithOptions (1 samples, 0.41%)</title><rect x="94.1909%" y="1045" width="0.4149%" height="15" fill="rgb(223,33,50)" fg:x="227" fg:w="1"/><text x="94.4409%" y="1055.50"></text></g><g><title>SystemConfiguration`_SC_getApplicationBundleID (1 samples, 0.41%)</title><rect x="94.1909%" y="1029" width="0.4149%" height="15" fill="rgb(219,149,13)" fg:x="227" fg:w="1"/><text x="94.4409%" y="1039.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.41%)</title><rect x="94.1909%" y="1013" width="0.4149%" height="15" fill="rgb(250,156,29)" fg:x="227" fg:w="1"/><text x="94.4409%" y="1023.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.41%)</title><rect x="94.1909%" y="997" width="0.4149%" height="15" fill="rgb(216,193,19)" fg:x="227" fg:w="1"/><text x="94.4409%" y="1007.50"></text></g><g><title>SystemConfiguration`___SC_getApplicationBundleID_block_invoke (1 samples, 0.41%)</title><rect x="94.1909%" y="981" width="0.4149%" height="15" fill="rgb(216,135,14)" fg:x="227" fg:w="1"/><text x="94.4409%" y="991.50"></text></g><g><title>CoreFoundation`CFBundleGetMainBundle (1 samples, 0.41%)</title><rect x="94.1909%" y="965" width="0.4149%" height="15" fill="rgb(241,47,5)" fg:x="227" fg:w="1"/><text x="94.4409%" y="975.50"></text></g><g><title>CoreFoundation`_CFBundleCreate (1 samples, 0.41%)</title><rect x="94.1909%" y="949" width="0.4149%" height="15" fill="rgb(233,42,35)" fg:x="227" fg:w="1"/><text x="94.4409%" y="959.50"></text></g><g><title>CoreFoundation`_CFBundleGetBundleVersionForURL (1 samples, 0.41%)</title><rect x="94.1909%" y="933" width="0.4149%" height="15" fill="rgb(231,13,6)" fg:x="227" fg:w="1"/><text x="94.4409%" y="943.50"></text></g><g><title>CoreFoundation`_CFIterateDirectory (1 samples, 0.41%)</title><rect x="94.1909%" y="917" width="0.4149%" height="15" fill="rgb(207,181,40)" fg:x="227" fg:w="1"/><text x="94.4409%" y="927.50"></text></g><g><title>libsystem_c.dylib`readdir (1 samples, 0.41%)</title><rect x="94.1909%" y="901" width="0.4149%" height="15" fill="rgb(254,173,49)" fg:x="227" fg:w="1"/><text x="94.4409%" y="911.50"></text></g><g><title>libsystem_kernel.dylib`__getdirentries64 (1 samples, 0.41%)</title><rect x="94.1909%" y="885" width="0.4149%" height="15" fill="rgb(221,1,38)" fg:x="227" fg:w="1"/><text x="94.4409%" y="895.50"></text></g><g><title>not-git`hyper::body::body::Sender::try_send_data (1 samples, 0.41%)</title><rect x="94.6058%" y="1093" width="0.4149%" height="15" fill="rgb(206,124,46)" fg:x="228" fg:w="1"/><text x="94.8558%" y="1103.50"></text></g><g><title>not-git`futures_channel::mpsc::Sender&lt;T&gt;::try_send (1 samples, 0.41%)</title><rect x="94.6058%" y="1077" width="0.4149%" height="15" fill="rgb(249,21,11)" fg:x="228" fg:w="1"/><text x="94.8558%" y="1087.50"></text></g><g><title>not-git`futures_task::waker::wake_arc_raw (1 samples, 0.41%)</title><rect x="94.6058%" y="1061" width="0.4149%" height="15" fill="rgb(222,201,40)" fg:x="228" fg:w="1"/><text x="94.8558%" y="1071.50"></text></g><g><title>libdispatch.dylib`_dispatch_semaphore_signal_slow (1 samples, 0.41%)</title><rect x="94.6058%" y="1045" width="0.4149%" height="15" fill="rgb(235,61,29)" fg:x="228" fg:w="1"/><text x="94.8558%" y="1055.50"></text></g><g><title>libsystem_kernel.dylib`semaphore_signal_trap (1 samples, 0.41%)</title><rect x="94.6058%" y="1029" width="0.4149%" height="15" fill="rgb(219,207,3)" fg:x="228" fg:w="1"/><text x="94.8558%" y="1039.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.41%)</title><rect x="95.0207%" y="965" width="0.4149%" height="15" fill="rgb(222,56,46)" fg:x="229" fg:w="1"/><text x="95.2707%" y="975.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.41%)</title><rect x="95.0207%" y="949" width="0.4149%" height="15" fill="rgb(239,76,54)" fg:x="229" fg:w="1"/><text x="95.2707%" y="959.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.41%)</title><rect x="95.4357%" y="917" width="0.4149%" height="15" fill="rgb(231,124,27)" fg:x="230" fg:w="1"/><text x="95.6857%" y="927.50"></text></g><g><title>not-git`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (4 samples, 1.66%)</title><rect x="94.6058%" y="1141" width="1.6598%" height="15" fill="rgb(249,195,6)" fg:x="228" fg:w="4"/><text x="94.8558%" y="1151.50"></text></g><g><title>not-git`&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (4 samples, 1.66%)</title><rect x="94.6058%" y="1125" width="1.6598%" height="15" fill="rgb(237,174,47)" fg:x="228" fg:w="4"/><text x="94.8558%" y="1135.50"></text></g><g><title>not-git`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (4 samples, 1.66%)</title><rect x="94.6058%" y="1109" width="1.6598%" height="15" fill="rgb(206,201,31)" fg:x="228" fg:w="4"/><text x="94.8558%" y="1119.50"></text></g><g><title>not-git`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (3 samples, 1.24%)</title><rect x="95.0207%" y="1093" width="1.2448%" height="15" fill="rgb(231,57,52)" fg:x="229" fg:w="3"/><text x="95.2707%" y="1103.50"></text></g><g><title>not-git`hyper::proto::h1::decode::Decoder::decode (3 samples, 1.24%)</title><rect x="95.0207%" y="1077" width="1.2448%" height="15" fill="rgb(248,177,22)" fg:x="229" fg:w="3"/><text x="95.2707%" y="1087.50"></text></g><g><title>not-git`&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (3 samples, 1.24%)</title><rect x="95.0207%" y="1061" width="1.2448%" height="15" fill="rgb(215,211,37)" fg:x="229" fg:w="3"/><text x="95.2707%" y="1071.50"></text></g><g><title>not-git`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (3 samples, 1.24%)</title><rect x="95.0207%" y="1045" width="1.2448%" height="15" fill="rgb(241,128,51)" fg:x="229" fg:w="3"/><text x="95.2707%" y="1055.50"></text></g><g><title>not-git`&lt;tokio_native_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 1.24%)</title><rect x="95.0207%" y="1029" width="1.2448%" height="15" fill="rgb(227,165,31)" fg:x="229" fg:w="3"/><text x="95.2707%" y="1039.50"></text></g><g><title>not-git`&lt;security_framework::secure_transport::SslStream&lt;S&gt; as std::io::Read&gt;::read (3 samples, 1.24%)</title><rect x="95.0207%" y="1013" width="1.2448%" height="15" fill="rgb(228,167,24)" fg:x="229" fg:w="3"/><text x="95.2707%" y="1023.50"></text></g><g><title>Security`SSLRead (3 samples, 1.24%)</title><rect x="95.0207%" y="997" width="1.2448%" height="15" fill="rgb(228,143,12)" fg:x="229" fg:w="3"/><text x="95.2707%" y="1007.50"></text></g><g><title>Security`SSLRecordReadInternal (3 samples, 1.24%)</title><rect x="95.0207%" y="981" width="1.2448%" height="15" fill="rgb(249,149,8)" fg:x="229" fg:w="3"/><text x="95.2707%" y="991.50"></text></g><g><title>not-git`security_framework::secure_transport::read_func (2 samples, 0.83%)</title><rect x="95.4357%" y="965" width="0.8299%" height="15" fill="rgb(243,35,44)" fg:x="230" fg:w="2"/><text x="95.6857%" y="975.50"></text></g><g><title>not-git`std::panicking::try (2 samples, 0.83%)</title><rect x="95.4357%" y="949" width="0.8299%" height="15" fill="rgb(246,89,9)" fg:x="230" fg:w="2"/><text x="95.6857%" y="959.50"></text></g><g><title>not-git`tokio::net::tcp::stream::TcpStream::poll_read_priv (2 samples, 0.83%)</title><rect x="95.4357%" y="933" width="0.8299%" height="15" fill="rgb(233,213,13)" fg:x="230" fg:w="2"/><text x="95.6857%" y="943.50"></text></g><g><title>not-git`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (1 samples, 0.41%)</title><rect x="95.8506%" y="917" width="0.4149%" height="15" fill="rgb(233,141,41)" fg:x="231" fg:w="1"/><text x="96.1006%" y="927.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (1 samples, 0.41%)</title><rect x="95.8506%" y="901" width="0.4149%" height="15" fill="rgb(239,167,4)" fg:x="231" fg:w="1"/><text x="96.1006%" y="911.50"></text></g><g><title>Security`SSLRecordServiceWriteQueueInternal (1 samples, 0.41%)</title><rect x="96.2656%" y="885" width="0.4149%" height="15" fill="rgb(209,217,16)" fg:x="232" fg:w="1"/><text x="96.5156%" y="895.50"></text></g><g><title>not-git`security_framework::secure_transport::write_func (1 samples, 0.41%)</title><rect x="96.2656%" y="869" width="0.4149%" height="15" fill="rgb(219,88,35)" fg:x="232" fg:w="1"/><text x="96.5156%" y="879.50"></text></g><g><title>not-git`tokio::net::tcp::stream::TcpStream::poll_write_priv (1 samples, 0.41%)</title><rect x="96.2656%" y="853" width="0.4149%" height="15" fill="rgb(220,193,23)" fg:x="232" fg:w="1"/><text x="96.5156%" y="863.50"></text></g><g><title>not-git`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (1 samples, 0.41%)</title><rect x="96.2656%" y="837" width="0.4149%" height="15" fill="rgb(230,90,52)" fg:x="232" fg:w="1"/><text x="96.5156%" y="847.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (1 samples, 0.41%)</title><rect x="96.2656%" y="821" width="0.4149%" height="15" fill="rgb(252,106,19)" fg:x="232" fg:w="1"/><text x="96.5156%" y="831.50"></text></g><g><title>Security`Security::DatabaseSession::DbOpen (1 samples, 0.41%)</title><rect x="96.6805%" y="597" width="0.4149%" height="15" fill="rgb(206,74,20)" fg:x="233" fg:w="1"/><text x="96.9305%" y="607.50"></text></g><g><title>Security`Security::DatabaseManager::dbOpen (1 samples, 0.41%)</title><rect x="96.6805%" y="581" width="0.4149%" height="15" fill="rgb(230,138,44)" fg:x="233" fg:w="1"/><text x="96.9305%" y="591.50"></text></g><g><title>Security`Security::Database::_dbOpen (1 samples, 0.41%)</title><rect x="96.6805%" y="565" width="0.4149%" height="15" fill="rgb(235,182,43)" fg:x="233" fg:w="1"/><text x="96.9305%" y="575.50"></text></g><g><title>Security`Security::AppleDatabase::dbOpen (1 samples, 0.41%)</title><rect x="96.6805%" y="549" width="0.4149%" height="15" fill="rgb(242,16,51)" fg:x="233" fg:w="1"/><text x="96.9305%" y="559.50"></text></g><g><title>Security`Security::DbModifier::getDbVersion (1 samples, 0.41%)</title><rect x="96.6805%" y="533" width="0.4149%" height="15" fill="rgb(248,9,4)" fg:x="233" fg:w="1"/><text x="96.9305%" y="543.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.41%)</title><rect x="96.6805%" y="517" width="0.4149%" height="15" fill="rgb(210,31,22)" fg:x="233" fg:w="1"/><text x="96.9305%" y="527.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::objDbHand (1 samples, 0.41%)</title><rect x="97.0954%" y="581" width="0.4149%" height="15" fill="rgb(239,54,39)" fg:x="234" fg:w="1"/><text x="97.3454%" y="591.50"></text></g><g><title>Security`Security::MDSSession::dbOpen (1 samples, 0.41%)</title><rect x="97.0954%" y="565" width="0.4149%" height="15" fill="rgb(230,99,41)" fg:x="234" fg:w="1"/><text x="97.3454%" y="575.50"></text></g><g><title>Security`Security::DatabaseSession::DbOpen (1 samples, 0.41%)</title><rect x="97.0954%" y="549" width="0.4149%" height="15" fill="rgb(253,106,12)" fg:x="234" fg:w="1"/><text x="97.3454%" y="559.50"></text></g><g><title>Security`Security::DbName::DbName (1 samples, 0.41%)</title><rect x="97.0954%" y="533" width="0.4149%" height="15" fill="rgb(213,46,41)" fg:x="234" fg:w="1"/><text x="97.3454%" y="543.50"></text></g><g><title>Security`Security::DbName::CanonicalizeName (1 samples, 0.41%)</title><rect x="97.0954%" y="517" width="0.4149%" height="15" fill="rgb(215,133,35)" fg:x="234" fg:w="1"/><text x="97.3454%" y="527.50"></text></g><g><title>Security`Security::cached_realpath (1 samples, 0.41%)</title><rect x="97.0954%" y="501" width="0.4149%" height="15" fill="rgb(213,28,5)" fg:x="234" fg:w="1"/><text x="97.3454%" y="511.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (1 samples, 0.41%)</title><rect x="97.0954%" y="485" width="0.4149%" height="15" fill="rgb(215,77,49)" fg:x="234" fg:w="1"/><text x="97.3454%" y="495.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.41%)</title><rect x="97.0954%" y="469" width="0.4149%" height="15" fill="rgb(248,100,22)" fg:x="234" fg:w="1"/><text x="97.3454%" y="479.50"></text></g><g><title>Security`invocation function for block in Security::cached_realpath (1 samples, 0.41%)</title><rect x="97.0954%" y="453" width="0.4149%" height="15" fill="rgb(208,67,9)" fg:x="234" fg:w="1"/><text x="97.3454%" y="463.50"></text></g><g><title>libsystem_c.dylib`realpath$DARWIN_EXTSN (1 samples, 0.41%)</title><rect x="97.0954%" y="437" width="0.4149%" height="15" fill="rgb(219,133,21)" fg:x="234" fg:w="1"/><text x="97.3454%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.41%)</title><rect x="97.0954%" y="421" width="0.4149%" height="15" fill="rgb(246,46,29)" fg:x="234" fg:w="1"/><text x="97.3454%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.41%)</title><rect x="97.0954%" y="405" width="0.4149%" height="15" fill="rgb(246,185,52)" fg:x="234" fg:w="1"/><text x="97.3454%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.41%)</title><rect x="97.0954%" y="389" width="0.4149%" height="15" fill="rgb(252,136,11)" fg:x="234" fg:w="1"/><text x="97.3454%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.41%)</title><rect x="97.0954%" y="373" width="0.4149%" height="15" fill="rgb(219,138,53)" fg:x="234" fg:w="1"/><text x="97.3454%" y="383.50"></text></g><g><title>Security`SecTrustCopyPublicKey (3 samples, 1.24%)</title><rect x="96.6805%" y="821" width="1.2448%" height="15" fill="rgb(211,51,23)" fg:x="233" fg:w="3"/><text x="96.9305%" y="831.50"></text></g><g><title>Security`SecCertificateCopyPublicKey$LEGACYMAC (3 samples, 1.24%)</title><rect x="96.6805%" y="805" width="1.2448%" height="15" fill="rgb(247,221,28)" fg:x="233" fg:w="3"/><text x="96.9305%" y="815.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::publicKey (3 samples, 1.24%)</title><rect x="96.6805%" y="789" width="1.2448%" height="15" fill="rgb(251,222,45)" fg:x="233" fg:w="3"/><text x="96.9305%" y="799.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::copyFirstFieldValue (3 samples, 1.24%)</title><rect x="96.6805%" y="773" width="1.2448%" height="15" fill="rgb(217,162,53)" fg:x="233" fg:w="3"/><text x="96.9305%" y="783.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::clHandle (3 samples, 1.24%)</title><rect x="96.6805%" y="757" width="1.2448%" height="15" fill="rgb(229,93,14)" fg:x="233" fg:w="3"/><text x="96.9305%" y="767.50"></text></g><g><title>Security`Security::CssmClient::AttachmentImpl::activate (3 samples, 1.24%)</title><rect x="96.6805%" y="741" width="1.2448%" height="15" fill="rgb(209,67,49)" fg:x="233" fg:w="3"/><text x="96.9305%" y="751.50"></text></g><g><title>Security`Security::CssmClient::ModuleImpl::activate (3 samples, 1.24%)</title><rect x="96.6805%" y="725" width="1.2448%" height="15" fill="rgb(213,87,29)" fg:x="233" fg:w="3"/><text x="96.9305%" y="735.50"></text></g><g><title>Security`CSSM_ModuleLoad (3 samples, 1.24%)</title><rect x="96.6805%" y="709" width="1.2448%" height="15" fill="rgb(205,151,52)" fg:x="233" fg:w="3"/><text x="96.9305%" y="719.50"></text></g><g><title>Security`Security::CssmClient::Table&lt;Security::MDSClient::Common&gt;::fetch (3 samples, 1.24%)</title><rect x="96.6805%" y="693" width="1.2448%" height="15" fill="rgb(253,215,39)" fg:x="233" fg:w="3"/><text x="96.9305%" y="703.50"></text></g><g><title>Security`Security::CssmClient::Table&lt;Security::MDSClient::Common&gt;::startQuery (3 samples, 1.24%)</title><rect x="96.6805%" y="677" width="1.2448%" height="15" fill="rgb(221,220,41)" fg:x="233" fg:w="3"/><text x="96.9305%" y="687.50"></text></g><g><title>Security`Security::MDSClient::Directory::dlGetFirst (3 samples, 1.24%)</title><rect x="96.6805%" y="661" width="1.2448%" height="15" fill="rgb(218,133,21)" fg:x="233" fg:w="3"/><text x="96.9305%" y="671.50"></text></g><g><title>Security`Security::MDSClient::Directory::cdsa (3 samples, 1.24%)</title><rect x="96.6805%" y="645" width="1.2448%" height="15" fill="rgb(221,193,43)" fg:x="233" fg:w="3"/><text x="96.9305%" y="655.50"></text></g><g><title>Security`mds_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (3 samples, 1.24%)</title><rect x="96.6805%" y="629" width="1.2448%" height="15" fill="rgb(240,128,52)" fg:x="233" fg:w="3"/><text x="96.9305%" y="639.50"></text></g><g><title>Security`Security::MDSSession::DbOpen (3 samples, 1.24%)</title><rect x="96.6805%" y="613" width="1.2448%" height="15" fill="rgb(253,114,12)" fg:x="233" fg:w="3"/><text x="96.9305%" y="623.50"></text></g><g><title>Security`Security::MDSSession::updateDataBases (2 samples, 0.83%)</title><rect x="97.0954%" y="597" width="0.8299%" height="15" fill="rgb(215,223,47)" fg:x="234" fg:w="2"/><text x="97.3454%" y="607.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::updateForBundleDir (1 samples, 0.41%)</title><rect x="97.5104%" y="581" width="0.4149%" height="15" fill="rgb(248,225,23)" fg:x="235" fg:w="1"/><text x="97.7604%" y="591.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::updateForBundle (1 samples, 0.41%)</title><rect x="97.5104%" y="565" width="0.4149%" height="15" fill="rgb(250,108,0)" fg:x="235" fg:w="1"/><text x="97.7604%" y="575.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::directDbHand (1 samples, 0.41%)</title><rect x="97.5104%" y="549" width="0.4149%" height="15" fill="rgb(228,208,7)" fg:x="235" fg:w="1"/><text x="97.7604%" y="559.50"></text></g><g><title>Security`Security::MDSSession::dbOpen (1 samples, 0.41%)</title><rect x="97.5104%" y="533" width="0.4149%" height="15" fill="rgb(244,45,10)" fg:x="235" fg:w="1"/><text x="97.7604%" y="543.50"></text></g><g><title>Security`Security::DatabaseSession::DbOpen (1 samples, 0.41%)</title><rect x="97.5104%" y="517" width="0.4149%" height="15" fill="rgb(207,125,25)" fg:x="235" fg:w="1"/><text x="97.7604%" y="527.50"></text></g><g><title>Security`Security::DatabaseManager::dbOpen (1 samples, 0.41%)</title><rect x="97.5104%" y="501" width="0.4149%" height="15" fill="rgb(210,195,18)" fg:x="235" fg:w="1"/><text x="97.7604%" y="511.50"></text></g><g><title>Security`Security::Database::_dbOpen (1 samples, 0.41%)</title><rect x="97.5104%" y="485" width="0.4149%" height="15" fill="rgb(249,80,12)" fg:x="235" fg:w="1"/><text x="97.7604%" y="495.50"></text></g><g><title>Security`Security::AppleDatabase::dbOpen (1 samples, 0.41%)</title><rect x="97.5104%" y="469" width="0.4149%" height="15" fill="rgb(221,65,9)" fg:x="235" fg:w="1"/><text x="97.7604%" y="479.50"></text></g><g><title>Security`Security::DbModifier::getDbVersion (1 samples, 0.41%)</title><rect x="97.5104%" y="453" width="0.4149%" height="15" fill="rgb(235,49,36)" fg:x="235" fg:w="1"/><text x="97.7604%" y="463.50"></text></g><g><title>Security`Security::TrackingAllocator::~TrackingAllocator (1 samples, 0.41%)</title><rect x="97.5104%" y="437" width="0.4149%" height="15" fill="rgb(225,32,20)" fg:x="235" fg:w="1"/><text x="97.7604%" y="447.50"></text></g><g><title>Security`std::__1::__tree&lt;void*, std::__1::less&lt;void*&gt;, std::__1::allocator&lt;void*&gt;&gt;::destroy(std::__1::__tree_node (1 samples, 0.41%)</title><rect x="97.5104%" y="421" width="0.4149%" height="15" fill="rgb(215,141,46)" fg:x="235" fg:w="1"/><text x="97.7604%" y="431.50"></text></g><g><title>Security`std::__1::__tree&lt;void*, std::__1::less&lt;void*&gt;, std::__1::allocator&lt;void*&gt;&gt;::destroy(std::__1::__tree_node (1 samples, 0.41%)</title><rect x="97.5104%" y="405" width="0.4149%" height="15" fill="rgb(250,160,47)" fg:x="235" fg:w="1"/><text x="97.7604%" y="415.50"></text></g><g><title>Security`std::__1::__tree&lt;void*, std::__1::less&lt;void*&gt;, std::__1::allocator&lt;void*&gt;&gt;::destroy(std::__1::__tree_node (1 samples, 0.41%)</title><rect x="97.5104%" y="389" width="0.4149%" height="15" fill="rgb(216,222,40)" fg:x="235" fg:w="1"/><text x="97.7604%" y="399.50"></text></g><g><title>Security`std::__1::__tree&lt;void*, std::__1::less&lt;void*&gt;, std::__1::allocator&lt;void*&gt;&gt;::destroy(std::__1::__tree_node (1 samples, 0.41%)</title><rect x="97.5104%" y="373" width="0.4149%" height="15" fill="rgb(234,217,39)" fg:x="235" fg:w="1"/><text x="97.7604%" y="383.50"></text></g><g><title>Security`std::__1::__tree&lt;void*, std::__1::less&lt;void*&gt;, std::__1::allocator&lt;void*&gt;&gt;::destroy(std::__1::__tree_node (1 samples, 0.41%)</title><rect x="97.5104%" y="357" width="0.4149%" height="15" fill="rgb(207,178,40)" fg:x="235" fg:w="1"/><text x="97.7604%" y="367.50"></text></g><g><title>Security`std::__1::__tree&lt;void*, std::__1::less&lt;void*&gt;, std::__1::allocator&lt;void*&gt;&gt;::destroy(std::__1::__tree_node (1 samples, 0.41%)</title><rect x="97.5104%" y="341" width="0.4149%" height="15" fill="rgb(221,136,13)" fg:x="235" fg:w="1"/><text x="97.7604%" y="351.50"></text></g><g><title>Security`std::__1::__tree&lt;void*, std::__1::less&lt;void*&gt;, std::__1::allocator&lt;void*&gt;&gt;::destroy(std::__1::__tree_node (1 samples, 0.41%)</title><rect x="97.5104%" y="325" width="0.4149%" height="15" fill="rgb(249,199,10)" fg:x="235" fg:w="1"/><text x="97.7604%" y="335.50"></text></g><g><title>Security`std::__1::__tree&lt;void*, std::__1::less&lt;void*&gt;, std::__1::allocator&lt;void*&gt;&gt;::destroy(std::__1::__tree_node (1 samples, 0.41%)</title><rect x="97.5104%" y="309" width="0.4149%" height="15" fill="rgb(249,222,13)" fg:x="235" fg:w="1"/><text x="97.7604%" y="319.50"></text></g><g><title>Security`std::__1::__tree&lt;void*, std::__1::less&lt;void*&gt;, std::__1::allocator&lt;void*&gt;&gt;::destroy(std::__1::__tree_node (1 samples, 0.41%)</title><rect x="97.5104%" y="293" width="0.4149%" height="15" fill="rgb(244,185,38)" fg:x="235" fg:w="1"/><text x="97.7604%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.41%)</title><rect x="97.5104%" y="277" width="0.4149%" height="15" fill="rgb(236,202,9)" fg:x="235" fg:w="1"/><text x="97.7604%" y="287.50"></text></g><g><title>Security`SSLHandshake (5 samples, 2.07%)</title><rect x="96.2656%" y="917" width="2.0747%" height="15" fill="rgb(250,229,37)" fg:x="232" fg:w="5"/><text x="96.5156%" y="927.50">S..</text></g><g><title>Security`SSLHandshakeProceed (5 samples, 2.07%)</title><rect x="96.2656%" y="901" width="2.0747%" height="15" fill="rgb(206,174,23)" fg:x="232" fg:w="5"/><text x="96.5156%" y="911.50">S..</text></g><g><title>libcoretls.dylib`tls_handshake_process (4 samples, 1.66%)</title><rect x="96.6805%" y="885" width="1.6598%" height="15" fill="rgb(211,33,43)" fg:x="233" fg:w="4"/><text x="96.9305%" y="895.50"></text></g><g><title>libcoretls.dylib`SSLProcessHandshakeRecordInner (4 samples, 1.66%)</title><rect x="96.6805%" y="869" width="1.6598%" height="15" fill="rgb(245,58,50)" fg:x="233" fg:w="4"/><text x="96.9305%" y="879.50"></text></g><g><title>Security`tls_handshake_message_callback (4 samples, 1.66%)</title><rect x="96.6805%" y="853" width="1.6598%" height="15" fill="rgb(244,68,36)" fg:x="233" fg:w="4"/><text x="96.9305%" y="863.50"></text></g><g><title>libcoretls_cfhelpers.dylib`tls_helper_set_peer_pubkey (4 samples, 1.66%)</title><rect x="96.6805%" y="837" width="1.6598%" height="15" fill="rgb(232,229,15)" fg:x="233" fg:w="4"/><text x="96.9305%" y="847.50"></text></g><g><title>libcoretls_cfhelpers.dylib`tls_helper_create_cfarray_from_certificates (1 samples, 0.41%)</title><rect x="97.9253%" y="821" width="0.4149%" height="15" fill="rgb(254,30,23)" fg:x="236" fg:w="1"/><text x="98.1753%" y="831.50"></text></g><g><title>Security`SecCertificateCreateWithData (1 samples, 0.41%)</title><rect x="97.9253%" y="805" width="0.4149%" height="15" fill="rgb(235,160,14)" fg:x="236" fg:w="1"/><text x="98.1753%" y="815.50"></text></g><g><title>Security`SecCertificateParse (1 samples, 0.41%)</title><rect x="97.9253%" y="789" width="0.4149%" height="15" fill="rgb(212,155,44)" fg:x="236" fg:w="1"/><text x="98.1753%" y="799.50"></text></g><g><title>CoreFoundation`CFSetCreateMutable (1 samples, 0.41%)</title><rect x="97.9253%" y="773" width="0.4149%" height="15" fill="rgb(226,2,50)" fg:x="236" fg:w="1"/><text x="98.1753%" y="783.50"></text></g><g><title>CoreFoundation`__CFSetCreateGeneric (1 samples, 0.41%)</title><rect x="97.9253%" y="757" width="0.4149%" height="15" fill="rgb(234,177,6)" fg:x="236" fg:w="1"/><text x="98.1753%" y="767.50"></text></g><g><title>CoreFoundation`CFBasicHashCreate (1 samples, 0.41%)</title><rect x="97.9253%" y="741" width="0.4149%" height="15" fill="rgb(217,24,9)" fg:x="236" fg:w="1"/><text x="98.1753%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.41%)</title><rect x="97.9253%" y="725" width="0.4149%" height="15" fill="rgb(220,13,46)" fg:x="236" fg:w="1"/><text x="98.1753%" y="735.50"></text></g><g><title>Security`__handle_trust_evaluate_xpc_block_invoke_2 (1 samples, 0.41%)</title><rect x="98.3402%" y="741" width="0.4149%" height="15" fill="rgb(239,221,27)" fg:x="237" fg:w="1"/><text x="98.5902%" y="751.50"></text></g><g><title>Security`SecXPCDictionaryCopyDictionaryOptional (1 samples, 0.41%)</title><rect x="98.3402%" y="725" width="0.4149%" height="15" fill="rgb(222,198,25)" fg:x="237" fg:w="1"/><text x="98.5902%" y="735.50"></text></g><g><title>Security`SecXPCDictionaryCopyDictionaryAndPossiblyMutateMessage (1 samples, 0.41%)</title><rect x="98.3402%" y="709" width="0.4149%" height="15" fill="rgb(211,99,13)" fg:x="237" fg:w="1"/><text x="98.5902%" y="719.50"></text></g><g><title>Security`SecXPCDictionaryCopyPListAndPossiblyMutateMessage (1 samples, 0.41%)</title><rect x="98.3402%" y="693" width="0.4149%" height="15" fill="rgb(232,111,31)" fg:x="237" fg:w="1"/><text x="98.5902%" y="703.50"></text></g><g><title>Security`der_decode_plist (1 samples, 0.41%)</title><rect x="98.3402%" y="677" width="0.4149%" height="15" fill="rgb(245,82,37)" fg:x="237" fg:w="1"/><text x="98.5902%" y="687.50"></text></g><g><title>Security`der_decode_dictionary (1 samples, 0.41%)</title><rect x="98.3402%" y="661" width="0.4149%" height="15" fill="rgb(227,149,46)" fg:x="237" fg:w="1"/><text x="98.5902%" y="671.50"></text></g><g><title>Security`der_decode_plist (1 samples, 0.41%)</title><rect x="98.3402%" y="645" width="0.4149%" height="15" fill="rgb(218,36,50)" fg:x="237" fg:w="1"/><text x="98.5902%" y="655.50"></text></g><g><title>Security`der_decode_date (1 samples, 0.41%)</title><rect x="98.3402%" y="629" width="0.4149%" height="15" fill="rgb(226,80,48)" fg:x="237" fg:w="1"/><text x="98.5902%" y="639.50"></text></g><g><title>Security`der_decode_commontime_body (1 samples, 0.41%)</title><rect x="98.3402%" y="613" width="0.4149%" height="15" fill="rgb(238,224,15)" fg:x="237" fg:w="1"/><text x="98.5902%" y="623.50"></text></g><g><title>Security`SecCFCalendarDoWithZuluCalendar (1 samples, 0.41%)</title><rect x="98.3402%" y="597" width="0.4149%" height="15" fill="rgb(241,136,10)" fg:x="237" fg:w="1"/><text x="98.5902%" y="607.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (1 samples, 0.41%)</title><rect x="98.3402%" y="581" width="0.4149%" height="15" fill="rgb(208,32,45)" fg:x="237" fg:w="1"/><text x="98.5902%" y="591.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.41%)</title><rect x="98.3402%" y="565" width="0.4149%" height="15" fill="rgb(207,135,9)" fg:x="237" fg:w="1"/><text x="98.5902%" y="575.50"></text></g><g><title>Security`__SecCFCalendarDoWithZuluCalendar_block_invoke (1 samples, 0.41%)</title><rect x="98.3402%" y="549" width="0.4149%" height="15" fill="rgb(206,86,44)" fg:x="237" fg:w="1"/><text x="98.5902%" y="559.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.41%)</title><rect x="98.3402%" y="533" width="0.4149%" height="15" fill="rgb(245,177,15)" fg:x="237" fg:w="1"/><text x="98.5902%" y="543.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.41%)</title><rect x="98.3402%" y="517" width="0.4149%" height="15" fill="rgb(206,64,50)" fg:x="237" fg:w="1"/><text x="98.5902%" y="527.50"></text></g><g><title>Security`__SecCFCalendarGetZulu_block_invoke (1 samples, 0.41%)</title><rect x="98.3402%" y="501" width="0.4149%" height="15" fill="rgb(234,36,40)" fg:x="237" fg:w="1"/><text x="98.5902%" y="511.50"></text></g><g><title>Foundation`@objc static NSCalendar._newCalendarWithIdentifier(_:) (1 samples, 0.41%)</title><rect x="98.3402%" y="485" width="0.4149%" height="15" fill="rgb(213,64,8)" fg:x="237" fg:w="1"/><text x="98.5902%" y="495.50"></text></g><g><title>Foundation`specialized static NSCalendar._newCalendarWithIdentifier(_:) (1 samples, 0.41%)</title><rect x="98.3402%" y="469" width="0.4149%" height="15" fill="rgb(210,75,36)" fg:x="237" fg:w="1"/><text x="98.5902%" y="479.50"></text></g><g><title>Foundation`closure #1 in CalendarCache.fixed(_:)partial apply (1 samples, 0.41%)</title><rect x="98.3402%" y="453" width="0.4149%" height="15" fill="rgb(229,88,21)" fg:x="237" fg:w="1"/><text x="98.5902%" y="463.50"></text></g><g><title>Foundation`partial apply for closure #1 in CalendarCache.fixed(_:) (1 samples, 0.41%)</title><rect x="98.3402%" y="437" width="0.4149%" height="15" fill="rgb(252,204,47)" fg:x="237" fg:w="1"/><text x="98.5902%" y="447.50"></text></g><g><title>Foundation`closure #1 in CalendarCache.fixed(_:) (1 samples, 0.41%)</title><rect x="98.3402%" y="421" width="0.4149%" height="15" fill="rgb(208,77,27)" fg:x="237" fg:w="1"/><text x="98.5902%" y="431.50"></text></g><g><title>Foundation`protocol witness for _CalendarProtocol.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) in conformance _CalendarICU (1 samples, 0.41%)</title><rect x="98.3402%" y="405" width="0.4149%" height="15" fill="rgb(221,76,26)" fg:x="237" fg:w="1"/><text x="98.5902%" y="415.50"></text></g><g><title>Foundation`_CalendarICU.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) (1 samples, 0.41%)</title><rect x="98.3402%" y="389" width="0.4149%" height="15" fill="rgb(225,139,18)" fg:x="237" fg:w="1"/><text x="98.5902%" y="399.50"></text></g><g><title>Foundation`specialized static _CalendarICU.icuCalendar(identifier:timeZone:localeIdentifier:localePrefs:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) (1 samples, 0.41%)</title><rect x="98.3402%" y="373" width="0.4149%" height="15" fill="rgb(230,137,11)" fg:x="237" fg:w="1"/><text x="98.5902%" y="383.50"></text></g><g><title>libicucore.A.dylib`ucal_open (1 samples, 0.41%)</title><rect x="98.3402%" y="357" width="0.4149%" height="15" fill="rgb(212,28,1)" fg:x="237" fg:w="1"/><text x="98.5902%" y="367.50"></text></g><g><title>libicucore.A.dylib`icu::Calendar::createInstance (1 samples, 0.41%)</title><rect x="98.3402%" y="341" width="0.4149%" height="15" fill="rgb(248,164,17)" fg:x="237" fg:w="1"/><text x="98.5902%" y="351.50"></text></g><g><title>libicucore.A.dylib`0x000000019e67cc84 (1 samples, 0.41%)</title><rect x="98.3402%" y="325" width="0.4149%" height="15" fill="rgb(222,171,42)" fg:x="237" fg:w="1"/><text x="98.5902%" y="335.50"></text></g><g><title>libicucore.A.dylib`0x000000019e682004 (1 samples, 0.41%)</title><rect x="98.3402%" y="309" width="0.4149%" height="15" fill="rgb(243,84,45)" fg:x="237" fg:w="1"/><text x="98.5902%" y="319.50"></text></g><g><title>libicucore.A.dylib`icu::UnifiedCache::_get (1 samples, 0.41%)</title><rect x="98.3402%" y="293" width="0.4149%" height="15" fill="rgb(252,49,23)" fg:x="237" fg:w="1"/><text x="98.5902%" y="303.50"></text></g><g><title>libicucore.A.dylib`icu::LocaleCacheKey&lt;icu::SharedCalendar&gt;::createObject (1 samples, 0.41%)</title><rect x="98.3402%" y="277" width="0.4149%" height="15" fill="rgb(215,19,7)" fg:x="237" fg:w="1"/><text x="98.5902%" y="287.50"></text></g><g><title>libicucore.A.dylib`icu::Calendar::makeInstance (1 samples, 0.41%)</title><rect x="98.3402%" y="261" width="0.4149%" height="15" fill="rgb(238,81,41)" fg:x="237" fg:w="1"/><text x="98.5902%" y="271.50"></text></g><g><title>libicucore.A.dylib`icu::GregorianCalendar::GregorianCalendar (1 samples, 0.41%)</title><rect x="98.3402%" y="245" width="0.4149%" height="15" fill="rgb(210,199,37)" fg:x="237" fg:w="1"/><text x="98.5902%" y="255.50"></text></g><g><title>libicucore.A.dylib`icu::Calendar::Calendar (1 samples, 0.41%)</title><rect x="98.3402%" y="229" width="0.4149%" height="15" fill="rgb(244,192,49)" fg:x="237" fg:w="1"/><text x="98.5902%" y="239.50"></text></g><g><title>libicucore.A.dylib`icu::Calendar::setWeekData (1 samples, 0.41%)</title><rect x="98.3402%" y="213" width="0.4149%" height="15" fill="rgb(226,211,11)" fg:x="237" fg:w="1"/><text x="98.5902%" y="223.50"></text></g><g><title>libicucore.A.dylib`icu::Locale::minimizeSubtags (1 samples, 0.41%)</title><rect x="98.3402%" y="197" width="0.4149%" height="15" fill="rgb(236,162,54)" fg:x="237" fg:w="1"/><text x="98.5902%" y="207.50"></text></g><g><title>libicucore.A.dylib`ulocimp_minimizeSubtags (1 samples, 0.41%)</title><rect x="98.3402%" y="181" width="0.4149%" height="15" fill="rgb(220,229,9)" fg:x="237" fg:w="1"/><text x="98.5902%" y="191.50"></text></g><g><title>libicucore.A.dylib`0x000000019e5b4b48 (1 samples, 0.41%)</title><rect x="98.3402%" y="165" width="0.4149%" height="15" fill="rgb(250,87,22)" fg:x="237" fg:w="1"/><text x="98.5902%" y="175.50"></text></g><g><title>libicucore.A.dylib`0x000000019e5b5e7c (1 samples, 0.41%)</title><rect x="98.3402%" y="149" width="0.4149%" height="15" fill="rgb(239,43,17)" fg:x="237" fg:w="1"/><text x="98.5902%" y="159.50"></text></g><g><title>libicucore.A.dylib`0x000000019e5b638c (1 samples, 0.41%)</title><rect x="98.3402%" y="133" width="0.4149%" height="15" fill="rgb(231,177,25)" fg:x="237" fg:w="1"/><text x="98.5902%" y="143.50"></text></g><g><title>libicucore.A.dylib`0x000000019e65000c (1 samples, 0.41%)</title><rect x="98.3402%" y="117" width="0.4149%" height="15" fill="rgb(219,179,1)" fg:x="237" fg:w="1"/><text x="98.5902%" y="127.50"></text></g><g><title>libicucore.A.dylib`0x000000019e6532f0 (1 samples, 0.41%)</title><rect x="98.3402%" y="101" width="0.4149%" height="15" fill="rgb(238,219,53)" fg:x="237" fg:w="1"/><text x="98.5902%" y="111.50"></text></g><g><title>libicucore.A.dylib`0x000000019e653fe0 (1 samples, 0.41%)</title><rect x="98.3402%" y="85" width="0.4149%" height="15" fill="rgb(232,167,36)" fg:x="237" fg:w="1"/><text x="98.5902%" y="95.50"></text></g><g><title>libicucore.A.dylib`0x000000019e623884 (1 samples, 0.41%)</title><rect x="98.3402%" y="69" width="0.4149%" height="15" fill="rgb(244,19,51)" fg:x="237" fg:w="1"/><text x="98.5902%" y="79.50"></text></g><g><title>libicucore.A.dylib`0x000000019e62440c (1 samples, 0.41%)</title><rect x="98.3402%" y="53" width="0.4149%" height="15" fill="rgb(224,6,22)" fg:x="237" fg:w="1"/><text x="98.5902%" y="63.50"></text></g><g><title>libicucore.A.dylib`0x000000019e624a48 (1 samples, 0.41%)</title><rect x="98.3402%" y="37" width="0.4149%" height="15" fill="rgb(224,145,5)" fg:x="237" fg:w="1"/><text x="98.5902%" y="47.50"></text></g><g><title>not-git`&lt;tokio_native_tls::MidHandshake&lt;S&gt; as core::future::future::Future&gt;::poll (7 samples, 2.90%)</title><rect x="96.2656%" y="965" width="2.9046%" height="15" fill="rgb(234,130,49)" fg:x="232" fg:w="7"/><text x="96.5156%" y="975.50">no..</text></g><g><title>not-git`native_tls::imp::MidHandshakeTlsStream&lt;S&gt;::handshake (7 samples, 2.90%)</title><rect x="96.2656%" y="949" width="2.9046%" height="15" fill="rgb(254,6,2)" fg:x="232" fg:w="7"/><text x="96.5156%" y="959.50">no..</text></g><g><title>not-git`security_framework::secure_transport::MidHandshakeClientBuilder&lt;S&gt;::handshake (7 samples, 2.90%)</title><rect x="96.2656%" y="933" width="2.9046%" height="15" fill="rgb(208,96,46)" fg:x="232" fg:w="7"/><text x="96.5156%" y="943.50">no..</text></g><g><title>not-git`security_framework::trust::SecTrust::evaluate_with_error (2 samples, 0.83%)</title><rect x="98.3402%" y="917" width="0.8299%" height="15" fill="rgb(239,3,39)" fg:x="237" fg:w="2"/><text x="98.5902%" y="927.50"></text></g><g><title>Security`SecTrustEvaluateInternal (2 samples, 0.83%)</title><rect x="98.3402%" y="901" width="0.8299%" height="15" fill="rgb(233,210,1)" fg:x="237" fg:w="2"/><text x="98.5902%" y="911.50"></text></g><g><title>Security`SecTrustEvaluateIfNecessary (2 samples, 0.83%)</title><rect x="98.3402%" y="885" width="0.8299%" height="15" fill="rgb(244,137,37)" fg:x="237" fg:w="2"/><text x="98.5902%" y="895.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (2 samples, 0.83%)</title><rect x="98.3402%" y="869" width="0.8299%" height="15" fill="rgb(240,136,2)" fg:x="237" fg:w="2"/><text x="98.5902%" y="879.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (2 samples, 0.83%)</title><rect x="98.3402%" y="853" width="0.8299%" height="15" fill="rgb(239,18,37)" fg:x="237" fg:w="2"/><text x="98.5902%" y="863.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke (2 samples, 0.83%)</title><rect x="98.3402%" y="837" width="0.8299%" height="15" fill="rgb(218,185,22)" fg:x="237" fg:w="2"/><text x="98.5902%" y="847.50"></text></g><g><title>libsystem_trace.dylib`_os_activity_initiate_impl (2 samples, 0.83%)</title><rect x="98.3402%" y="821" width="0.8299%" height="15" fill="rgb(225,218,4)" fg:x="237" fg:w="2"/><text x="98.5902%" y="831.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke_2 (2 samples, 0.83%)</title><rect x="98.3402%" y="805" width="0.8299%" height="15" fill="rgb(230,182,32)" fg:x="237" fg:w="2"/><text x="98.5902%" y="815.50"></text></g><g><title>Security`SecOSStatusWith (2 samples, 0.83%)</title><rect x="98.3402%" y="789" width="0.8299%" height="15" fill="rgb(242,56,43)" fg:x="237" fg:w="2"/><text x="98.5902%" y="799.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke_3 (2 samples, 0.83%)</title><rect x="98.3402%" y="773" width="0.8299%" height="15" fill="rgb(233,99,24)" fg:x="237" fg:w="2"/><text x="98.5902%" y="783.50"></text></g><g><title>Security`securityd_send_sync_and_do (2 samples, 0.83%)</title><rect x="98.3402%" y="757" width="0.8299%" height="15" fill="rgb(234,209,42)" fg:x="237" fg:w="2"/><text x="98.5902%" y="767.50"></text></g><g><title>Security`security_fw_send_message_with_reply_sync_inner (1 samples, 0.41%)</title><rect x="98.7552%" y="741" width="0.4149%" height="15" fill="rgb(227,7,12)" fg:x="238" fg:w="1"/><text x="99.0052%" y="751.50"></text></g><g><title>libxpc.dylib`xpc_connection_send_message_with_reply_sync (1 samples, 0.41%)</title><rect x="98.7552%" y="725" width="0.4149%" height="15" fill="rgb(245,203,43)" fg:x="238" fg:w="1"/><text x="99.0052%" y="735.50"></text></g><g><title>libxpc.dylib`_xpc_connection_pack_message (1 samples, 0.41%)</title><rect x="98.7552%" y="709" width="0.4149%" height="15" fill="rgb(238,205,33)" fg:x="238" fg:w="1"/><text x="99.0052%" y="719.50"></text></g><g><title>libxpc.dylib`_xpc_serializer_pack (1 samples, 0.41%)</title><rect x="98.7552%" y="693" width="0.4149%" height="15" fill="rgb(231,56,7)" fg:x="238" fg:w="1"/><text x="99.0052%" y="703.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_serialize (1 samples, 0.41%)</title><rect x="98.7552%" y="677" width="0.4149%" height="15" fill="rgb(244,186,29)" fg:x="238" fg:w="1"/><text x="99.0052%" y="687.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_apply_node_f (1 samples, 0.41%)</title><rect x="98.7552%" y="661" width="0.4149%" height="15" fill="rgb(234,111,31)" fg:x="238" fg:w="1"/><text x="99.0052%" y="671.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_serialize_apply (1 samples, 0.41%)</title><rect x="98.7552%" y="645" width="0.4149%" height="15" fill="rgb(241,149,10)" fg:x="238" fg:w="1"/><text x="99.0052%" y="655.50"></text></g><g><title>libxpc.dylib`_xpc_array_serialize (1 samples, 0.41%)</title><rect x="98.7552%" y="629" width="0.4149%" height="15" fill="rgb(249,206,44)" fg:x="238" fg:w="1"/><text x="99.0052%" y="639.50"></text></g><g><title>libxpc.dylib`_xpc_array_serialize (1 samples, 0.41%)</title><rect x="98.7552%" y="613" width="0.4149%" height="15" fill="rgb(251,153,30)" fg:x="238" fg:w="1"/><text x="99.0052%" y="623.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_serialize (1 samples, 0.41%)</title><rect x="98.7552%" y="597" width="0.4149%" height="15" fill="rgb(239,152,38)" fg:x="238" fg:w="1"/><text x="99.0052%" y="607.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_apply_node_f (1 samples, 0.41%)</title><rect x="98.7552%" y="581" width="0.4149%" height="15" fill="rgb(249,139,47)" fg:x="238" fg:w="1"/><text x="99.0052%" y="591.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_serialize_apply (1 samples, 0.41%)</title><rect x="98.7552%" y="565" width="0.4149%" height="15" fill="rgb(244,64,35)" fg:x="238" fg:w="1"/><text x="99.0052%" y="575.50"></text></g><g><title>libxpc.dylib`_xpc_array_serialize (1 samples, 0.41%)</title><rect x="98.7552%" y="549" width="0.4149%" height="15" fill="rgb(216,46,15)" fg:x="238" fg:w="1"/><text x="99.0052%" y="559.50"></text></g><g><title>libxpc.dylib`_xpc_array_serialize (1 samples, 0.41%)</title><rect x="98.7552%" y="533" width="0.4149%" height="15" fill="rgb(250,74,19)" fg:x="238" fg:w="1"/><text x="99.0052%" y="543.50"></text></g><g><title>libxpc.dylib`_xpc_date_serialize (1 samples, 0.41%)</title><rect x="98.7552%" y="517" width="0.4149%" height="15" fill="rgb(249,42,33)" fg:x="238" fg:w="1"/><text x="99.0052%" y="527.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.41%)</title><rect x="98.7552%" y="501" width="0.4149%" height="15" fill="rgb(242,149,17)" fg:x="238" fg:w="1"/><text x="99.0052%" y="511.50"></text></g><g><title>not-git`&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (8 samples, 3.32%)</title><rect x="96.2656%" y="1077" width="3.3195%" height="15" fill="rgb(244,29,21)" fg:x="232" fg:w="8"/><text x="96.5156%" y="1087.50">not..</text></g><g><title>not-git`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (8 samples, 3.32%)</title><rect x="96.2656%" y="1061" width="3.3195%" height="15" fill="rgb(220,130,37)" fg:x="232" fg:w="8"/><text x="96.5156%" y="1071.50">not..</text></g><g><title>not-git`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (8 samples, 3.32%)</title><rect x="96.2656%" y="1045" width="3.3195%" height="15" fill="rgb(211,67,2)" fg:x="232" fg:w="8"/><text x="96.5156%" y="1055.50">not..</text></g><g><title>not-git`&lt;hyper::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (8 samples, 3.32%)</title><rect x="96.2656%" y="1029" width="3.3195%" height="15" fill="rgb(235,68,52)" fg:x="232" fg:w="8"/><text x="96.5156%" y="1039.50">not..</text></g><g><title>not-git`reqwest::connect::with_timeout::_{{closure}} (8 samples, 3.32%)</title><rect x="96.2656%" y="1013" width="3.3195%" height="15" fill="rgb(246,142,3)" fg:x="232" fg:w="8"/><text x="96.5156%" y="1023.50">not..</text></g><g><title>not-git`reqwest::connect::Connector::connect_with_maybe_proxy::_{{closure}} (8 samples, 3.32%)</title><rect x="96.2656%" y="997" width="3.3195%" height="15" fill="rgb(241,25,7)" fg:x="232" fg:w="8"/><text x="96.5156%" y="1007.50">not..</text></g><g><title>not-git`&lt;hyper_tls::client::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::_{{closure}} (8 samples, 3.32%)</title><rect x="96.2656%" y="981" width="3.3195%" height="15" fill="rgb(242,119,39)" fg:x="232" fg:w="8"/><text x="96.5156%" y="991.50">not..</text></g><g><title>not-git`&lt;tokio_native_tls::StartedHandshakeFuture&lt;F,S&gt; as core::future::future::Future&gt;::poll (1 samples, 0.41%)</title><rect x="99.1701%" y="965" width="0.4149%" height="15" fill="rgb(241,98,45)" fg:x="239" fg:w="1"/><text x="99.4201%" y="975.50"></text></g><g><title>not-git`native_tls::imp::TlsConnector::connect (1 samples, 0.41%)</title><rect x="99.1701%" y="949" width="0.4149%" height="15" fill="rgb(254,28,30)" fg:x="239" fg:w="1"/><text x="99.4201%" y="959.50"></text></g><g><title>not-git`security_framework::secure_transport::ClientBuilder::handshake (1 samples, 0.41%)</title><rect x="99.1701%" y="933" width="0.4149%" height="15" fill="rgb(241,142,54)" fg:x="239" fg:w="1"/><text x="99.4201%" y="943.50"></text></g><g><title>not-git`security_framework::secure_transport::MidHandshakeClientBuilder&lt;S&gt;::handshake (1 samples, 0.41%)</title><rect x="99.1701%" y="917" width="0.4149%" height="15" fill="rgb(222,85,15)" fg:x="239" fg:w="1"/><text x="99.4201%" y="927.50"></text></g><g><title>Security`SSLHandshake (1 samples, 0.41%)</title><rect x="99.1701%" y="901" width="0.4149%" height="15" fill="rgb(210,85,47)" fg:x="239" fg:w="1"/><text x="99.4201%" y="911.50"></text></g><g><title>Security`SSLHandshakeStart (1 samples, 0.41%)</title><rect x="99.1701%" y="885" width="0.4149%" height="15" fill="rgb(224,206,25)" fg:x="239" fg:w="1"/><text x="99.4201%" y="895.50"></text></g><g><title>libcoretls.dylib`SSLAdvanceHandshake (1 samples, 0.41%)</title><rect x="99.1701%" y="869" width="0.4149%" height="15" fill="rgb(243,201,19)" fg:x="239" fg:w="1"/><text x="99.4201%" y="879.50"></text></g><g><title>libcoretls.dylib`SSLPrepareAndQueueMessage (1 samples, 0.41%)</title><rect x="99.1701%" y="853" width="0.4149%" height="15" fill="rgb(236,59,4)" fg:x="239" fg:w="1"/><text x="99.4201%" y="863.50"></text></g><g><title>libcoretls.dylib`SSLEncodeClientHello (1 samples, 0.41%)</title><rect x="99.1701%" y="837" width="0.4149%" height="15" fill="rgb(254,179,45)" fg:x="239" fg:w="1"/><text x="99.4201%" y="847.50"></text></g><g><title>libcoretls.dylib`SSLEncodeRandom (1 samples, 0.41%)</title><rect x="99.1701%" y="821" width="0.4149%" height="15" fill="rgb(226,14,10)" fg:x="239" fg:w="1"/><text x="99.4201%" y="831.50"></text></g><g><title>libcorecrypto.dylib`generate (1 samples, 0.41%)</title><rect x="99.1701%" y="805" width="0.4149%" height="15" fill="rgb(244,27,41)" fg:x="239" fg:w="1"/><text x="99.4201%" y="815.50"></text></g><g><title>libcorecrypto.dylib`ccrng_crypto_generate (1 samples, 0.41%)</title><rect x="99.1701%" y="789" width="0.4149%" height="15" fill="rgb(235,35,32)" fg:x="239" fg:w="1"/><text x="99.4201%" y="799.50"></text></g><g><title>libcorecrypto.dylib`ccdrbg_generate (1 samples, 0.41%)</title><rect x="99.1701%" y="773" width="0.4149%" height="15" fill="rgb(218,68,31)" fg:x="239" fg:w="1"/><text x="99.4201%" y="783.50"></text></g><g><title>libcorecrypto.dylib`generate (1 samples, 0.41%)</title><rect x="99.1701%" y="757" width="0.4149%" height="15" fill="rgb(207,120,37)" fg:x="239" fg:w="1"/><text x="99.4201%" y="767.50"></text></g><g><title>libcorecrypto.dylib`ccctr_init (1 samples, 0.41%)</title><rect x="99.1701%" y="741" width="0.4149%" height="15" fill="rgb(227,98,0)" fg:x="239" fg:w="1"/><text x="99.4201%" y="751.50"></text></g><g><title>libcorecrypto.dylib`ccaes_arm_encrypt_key256 (1 samples, 0.41%)</title><rect x="99.1701%" y="725" width="0.4149%" height="15" fill="rgb(207,7,3)" fg:x="239" fg:w="1"/><text x="99.4201%" y="735.50"></text></g><g><title>all (241 samples, 100%)</title><rect x="0.0000%" y="1333" width="100.0000%" height="15" fill="rgb(206,98,19)" fg:x="0" fg:w="241"/><text x="0.2500%" y="1343.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (15 samples, 6.22%)</title><rect x="93.7759%" y="1317" width="6.2241%" height="15" fill="rgb(217,5,26)" fg:x="226" fg:w="15"/><text x="94.0259%" y="1327.50">libsyste..</text></g><g><title>libsystem_pthread.dylib`_pthread_start (15 samples, 6.22%)</title><rect x="93.7759%" y="1301" width="6.2241%" height="15" fill="rgb(235,190,38)" fg:x="226" fg:w="15"/><text x="94.0259%" y="1311.50">libsyste..</text></g><g><title>not-git`std::sys::unix::thread::Thread::new::thread_start (15 samples, 6.22%)</title><rect x="93.7759%" y="1285" width="6.2241%" height="15" fill="rgb(247,86,24)" fg:x="226" fg:w="15"/><text x="94.0259%" y="1295.50">not-git`..</text></g><g><title>not-git`core::ops::function::FnOnce::call_once{{vtable.shim}} (15 samples, 6.22%)</title><rect x="93.7759%" y="1269" width="6.2241%" height="15" fill="rgb(205,101,16)" fg:x="226" fg:w="15"/><text x="94.0259%" y="1279.50">not-git`..</text></g><g><title>not-git`std::sys_common::backtrace::__rust_begin_short_backtrace (15 samples, 6.22%)</title><rect x="93.7759%" y="1253" width="6.2241%" height="15" fill="rgb(246,168,33)" fg:x="226" fg:w="15"/><text x="94.0259%" y="1263.50">not-git`..</text></g><g><title>not-git`tokio::runtime::runtime::Runtime::block_on (14 samples, 5.81%)</title><rect x="94.1909%" y="1237" width="5.8091%" height="15" fill="rgb(231,114,1)" fg:x="227" fg:w="14"/><text x="94.4409%" y="1247.50">not-git..</text></g><g><title>not-git`tokio::runtime::scheduler::current_thread::CurrentThread::block_on (14 samples, 5.81%)</title><rect x="94.1909%" y="1221" width="5.8091%" height="15" fill="rgb(207,184,53)" fg:x="227" fg:w="14"/><text x="94.4409%" y="1231.50">not-git..</text></g><g><title>not-git`tokio::runtime::context::set_scheduler (14 samples, 5.81%)</title><rect x="94.1909%" y="1205" width="5.8091%" height="15" fill="rgb(224,95,51)" fg:x="227" fg:w="14"/><text x="94.4409%" y="1215.50">not-git..</text></g><g><title>not-git`tokio::runtime::scheduler::current_thread::Context::run_task (13 samples, 5.39%)</title><rect x="94.6058%" y="1189" width="5.3942%" height="15" fill="rgb(212,188,45)" fg:x="228" fg:w="13"/><text x="94.8558%" y="1199.50">not-git..</text></g><g><title>not-git`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (13 samples, 5.39%)</title><rect x="94.6058%" y="1173" width="5.3942%" height="15" fill="rgb(223,154,38)" fg:x="228" fg:w="13"/><text x="94.8558%" y="1183.50">not-git..</text></g><g><title>not-git`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (13 samples, 5.39%)</title><rect x="94.6058%" y="1157" width="5.3942%" height="15" fill="rgb(251,22,52)" fg:x="228" fg:w="13"/><text x="94.8558%" y="1167.50">not-git..</text></g><g><title>not-git`reqwest::blocking::client::forward::_{{closure}} (9 samples, 3.73%)</title><rect x="96.2656%" y="1141" width="3.7344%" height="15" fill="rgb(229,209,22)" fg:x="232" fg:w="9"/><text x="96.5156%" y="1151.50">not-..</text></g><g><title>not-git`&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (9 samples, 3.73%)</title><rect x="96.2656%" y="1125" width="3.7344%" height="15" fill="rgb(234,138,34)" fg:x="232" fg:w="9"/><text x="96.5156%" y="1135.50">not-..</text></g><g><title>not-git`hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::_{{closure}} (9 samples, 3.73%)</title><rect x="96.2656%" y="1109" width="3.7344%" height="15" fill="rgb(212,95,11)" fg:x="232" fg:w="9"/><text x="96.5156%" y="1119.50">not-..</text></g><g><title>not-git`&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (9 samples, 3.73%)</title><rect x="96.2656%" y="1093" width="3.7344%" height="15" fill="rgb(240,179,47)" fg:x="232" fg:w="9"/><text x="96.5156%" y="1103.50">not-..</text></g><g><title>not-git`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (1 samples, 0.41%)</title><rect x="99.5851%" y="1077" width="0.4149%" height="15" fill="rgb(240,163,11)" fg:x="240" fg:w="1"/><text x="99.8351%" y="1087.50"></text></g></svg></svg>